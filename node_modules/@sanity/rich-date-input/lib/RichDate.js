'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _momentTimezone = require('moment-timezone');

var _momentTimezone2 = _interopRequireDefault(_momentTimezone);

var _generateHelpUrl = require('@sanity/generate-help-url');

var _generateHelpUrl2 = _interopRequireDefault(_generateHelpUrl);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _default = require('part:@sanity/components/formfields/default');

var _default2 = _interopRequireDefault(_default);

var _RichDate = require('./RichDate.css');

var _RichDate2 = _interopRequireDefault(_RichDate);

var _patchEvent = require('part:@sanity/form-builder/patch-event');

var _reactDatepicker = require('react-datepicker');

var _reactDatepicker2 = _interopRequireDefault(_reactDatepicker);

require('react-datepicker/dist/react-datepicker-cssmodules.css');

var _default3 = require('part:@sanity/components/selects/default');

var _default4 = _interopRequireDefault(_default3);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEPRECATION_WARNING = _react2.default.createElement(
  'div',
  { className: _RichDate2.default.deprecationWarning },
  'This field has ',
  _react2.default.createElement(
    'code',
    null,
    'type: ',
    'date'
  ),
  ', which is deprecated and should be changed to',
  ' ',
  _react2.default.createElement(
    'code',
    null,
    'type: ',
    'richDate'
  ),
  '. Please update your schema and migrate your data.',
  ' ',
  _react2.default.createElement(
    'a',
    { href: (0, _generateHelpUrl2.default)('migrate-to-rich-date'), target: '_blank', rel: 'noopener noreferrer' },
    'More info'
  )
);

class RichDateInput extends _react2.default.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.handleChange = nextValue => {
      const onChange = this.props.onChange;

      const assembledValue = this.assembleOutgoingValue(nextValue);
      onChange(_patchEvent.PatchEvent.from(assembledValue ? (0, _patchEvent.set)(assembledValue) : (0, _patchEvent.unset)()));
    }, this.handleTimeChange = nextValue => {
      const onChange = this.props.onChange;

      const assembledValue = this.assembleOutgoingValue(nextValue.value);
      onChange(_patchEvent.PatchEvent.from(assembledValue ? (0, _patchEvent.set)(assembledValue) : (0, _patchEvent.unset)()));
    }, this.getCurrentValue = () => {
      const value = this.props.value;

      if (!value) {
        return null;
      }
      return (0, _util.getOptions)(this.props).inputUtc ? value.utc : value.local;
    }, _temp;
  }

  assembleOutgoingValue(newMoment) {
    if (!newMoment || !newMoment.isValid()) {
      return undefined;
    }
    const name = this.props.type.name;

    if ((0, _util.getOptions)(this.props).inputUtc) {
      return {
        _type: name,
        utc: newMoment.utc().format() // e.g. "2017-02-12T09:15:00Z"
      };
    }
    return {
      _type: name,
      local: newMoment.format(), // e.g. 2017-02-21T10:15:00+01:00
      utc: newMoment.utc().format(), // e.g. 2017-02-12T09:15:00Z
      timezone: _momentTimezone2.default.tz.guess(), // e.g. Europe/Oslo
      offset: (0, _momentTimezone2.default)().utcOffset() // e.g. 60 (utc offset in minutes)
    };
  }

  render() {
    var _props = this.props;
    const value = _props.value,
          type = _props.type,
          level = _props.level;
    const title = type.title,
          description = type.description;

    const options = (0, _util.getOptions)(this.props);
    const format = [options.inputDate ? options.dateFormat : null, options.inputTime ? options.timeFormat : null].filter(Boolean).join(' ');
    const timeIntervals = (0, _util.getTimeIntervals)(value, options);
    const activeTimeInterval = timeIntervals.find(time => time.isActive === true);

    const placeholder = typeof type.placeholder === 'function' ? type.placeholder() : type.placeholder;

    return _react2.default.createElement(
      _default2.default,
      { labelFor: this.inputId, label: title, level: level, description: description },
      type.name === 'date' && DEPRECATION_WARNING,
      _react2.default.createElement(
        'div',
        { className: options.inputTime ? _RichDate2.default.rootWithTime : _RichDate2.default.root },
        options.inputDate && _react2.default.createElement(_reactDatepicker2.default, _extends({}, options, {
          showMonthDropdown: true,
          showYearDropdown: true,
          todayButton: options.calendarTodayLabel,
          selected: value && (0, _momentTimezone2.default)(options.inputUtc ? value.utc : value.local),
          placeholderText: placeholder,
          calendarClassName: _RichDate2.default.datepicker,
          className: _RichDate2.default.input,
          onChange: this.handleChange,
          value: value && (0, _momentTimezone2.default)(options.inputUtc ? value.utc : value.local).format(format),
          showTimeSelect: options.inputTime,
          dateFormat: options.dateFormat,
          timeFormat: options.timeFormat,
          timeIntervals: options.timeStep
        })),
        !options.inputDate && options.inputTime && _react2.default.createElement(_default4.default, {
          items: timeIntervals,
          value: activeTimeInterval,
          onChange: this.handleTimeChange
        })
      )
    );
  }
}

exports.default = RichDateInput;
RichDateInput.propTypes = {
  value: _propTypes2.default.shape({
    utc: _propTypes2.default.string,
    local: _propTypes2.default.string,
    timezone: _propTypes2.default.string,
    offset: _propTypes2.default.number
  }),
  type: _propTypes2.default.shape({
    title: _propTypes2.default.string.isRequired,
    name: _propTypes2.default.string.isRequired,
    options: _propTypes2.default.object
  }),
  onChange: _propTypes2.default.func,
  level: _propTypes2.default.number
};

RichDateInput.contextTypes = {
  resolveInputComponent: _propTypes2.default.func,
  schema: _propTypes2.default.object,
  intl: _propTypes2.default.shape({
    locale: _propTypes2.default.string
  })
};