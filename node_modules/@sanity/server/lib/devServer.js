'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getDevServer;

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _babelRegister = require('babel-register');

var _babelRegister2 = _interopRequireDefault(_babelRegister);

var _webpackDevMiddleware = require('webpack-dev-middleware');

var _webpackDevMiddleware2 = _interopRequireDefault(_webpackDevMiddleware);

var _webpackHotMiddleware = require('webpack-hot-middleware');

var _webpackHotMiddleware2 = _interopRequireDefault(_webpackHotMiddleware);

var _baseServer = require('./baseServer');

var _webpackConfig = require('./configs/webpack.config.dev');

var _webpackConfig2 = _interopRequireDefault(_webpackConfig);

var _getStaticBasePath = require('./util/getStaticBasePath');

var _getStaticBasePath2 = _interopRequireDefault(_getStaticBasePath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getDevServer(config = {}) {
  const staticPath = (0, _getStaticBasePath2.default)(config);
  const app = (0, _baseServer.getBaseServer)(config);
  const webpackConfig = config.webpack || (0, _webpackConfig2.default)(config);

  // Serve an empty CSS file for the main stylesheet,
  // as they are injected dynamically in development mode
  app.get(`${staticPath}/css/main.css`, (req, res) => {
    res.set('Content-Type', 'text/css');
    res.send();
  });

  // Use babel-register in order to be able to load things like
  // the document component, which can contain JSX etc
  (0, _babelRegister2.default)();

  // Apply the dev and hot middlewares to build/serve bundles on the fly
  const compiler = (0, _webpack2.default)(webpackConfig);
  app.use((0, _webpackDevMiddleware2.default)(compiler, {
    logLevel: 'silent',
    watchOptions: {
      ignored: /node_modules/
    },
    publicPath: webpackConfig.output.publicPath
  }));

  app.use((0, _webpackHotMiddleware2.default)(compiler));

  // Expose webpack compiler on server instance
  app.locals.compiler = compiler;

  // Call any registered initializers
  (0, _baseServer.callInitializers)(config);

  return (0, _baseServer.applyStaticRoutes)(app, config);
}