'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBaseServer = getBaseServer;
exports.getDocumentElement = getDocumentElement;
exports.applyStaticRoutes = applyStaticRoutes;
exports.callInitializers = callInitializers;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _server = require('react-dom/server');

var _server2 = _interopRequireDefault(_server);

var _requireUncached = require('require-uncached');

var _requireUncached2 = _interopRequireDefault(_requireUncached);

var _resolver = require('@sanity/resolver');

var _getStaticBasePath = require('./util/getStaticBasePath');

var _getStaticBasePath2 = _interopRequireDefault(_getStaticBasePath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const docPart = 'part:@sanity/base/document';
const initPart = 'part:@sanity/server/initializer';

const getDefaultModule = mod => {
  return mod && mod.__esModule ? mod.default : mod;
};

const getTitle = (project = {}) => {
  const projectName = project && project.name || '';
  return projectName ? `${projectName} - Sanity` : 'Sanity';
};

const assetify = (assetPath, hashes) => ({
  path: assetPath,
  hash: hashes[assetPath]
});

const getDocumentComponent = basePath => (0, _resolver.resolveParts)({ basePath }).then(res => {
  const part = res.implementations[docPart];
  if (!part) {
    throw new Error(`Part '${docPart}' is not implemented by any plugins, are you missing @sanity/base?`);
  }

  return getDefaultModule((0, _requireUncached2.default)(part[0].path));
});

function getBaseServer() {
  return (0, _express2.default)();
}

function getDocumentElement({ project, basePath, hashes }, props = {}) {
  const assetHashes = hashes || {};

  // Project filesystem base path
  return getDocumentComponent(basePath).then(Document => _react2.default.createElement(Document, Object.assign({
    // URL base path
    basePath: project && project.basePath || '',
    title: getTitle(project),
    stylesheets: ['css/main.css'].map(item => assetify(item, assetHashes)),
    scripts: ['js/vendor.bundle.js', 'js/app.bundle.js'].map(item => assetify(item, assetHashes))
  }, props)));
}

function applyStaticRoutes(app, config = {}) {
  const staticPath = config.staticPath || _path2.default.join(__dirname, '..', 'public');
  const staticBasePath = (0, _getStaticBasePath2.default)(config);

  app.use(staticBasePath, _express2.default.static(staticPath));

  app.get('*', (req, res) => {
    if (req.url.startsWith(staticBasePath)) {
      return res.status(404).send('File not found');
    }

    return getDocumentElement(config).then(doc => res.send(`<!doctype html>${_server2.default.renderToStaticMarkup(doc)}`)).catch(err => {
      console.error(err.stack); // eslint-disable-line no-console

      res.set('Content-Type', 'text/plain').status(500).send(err.stack);
    });
  });

  return app;
}

function callInitializers(config) {
  (0, _resolver.resolveParts)({ config }).then(res => {
    const parts = res.implementations[initPart];
    if (!parts) {
      return;
    }

    res.implementations[initPart].map(part => getDefaultModule(require(part.path))).forEach(initializer => initializer(config));
  });
}