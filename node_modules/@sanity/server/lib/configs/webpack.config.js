'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _resolveFrom = require('resolve-from');

var _resolveFrom2 = _interopRequireDefault(_resolveFrom);

var _v = require('@sanity/webpack-integration/v3');

var _v2 = _interopRequireDefault(_v);

var _extractTextWebpackPlugin = require('extract-text-webpack-plugin');

var _extractTextWebpackPlugin2 = _interopRequireDefault(_extractTextWebpackPlugin);

var _getStaticBasePath = require('../util/getStaticBasePath');

var _getStaticBasePath2 = _interopRequireDefault(_getStaticBasePath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const resolve = mod => require.resolve(mod);

// eslint-disable-next-line complexity

exports.default = (config = {}) => {
  const staticPath = (0, _getStaticBasePath2.default)(config);
  const env = config.env || 'development';
  const wpIntegrationOptions = { basePath: config.basePath, env: config.env };
  const basePath = config.basePath || process.cwd();
  const skipMinify = config.skipMinify || false;

  const reactPath = _resolveFrom2.default.silent(basePath, 'react');
  const reactDomPath = _resolveFrom2.default.silent(basePath, 'react-dom');
  const missing = [!reactPath && '`react`', !reactDomPath && '`react-dom`'].filter(Boolean);
  if (!reactPath || !reactDomPath) {
    const missingErr = [`Could not find ${missing.join(', ')} dependencies in project directory`, 'These need to be declared in `package.json` and be installed for Sanity to work'].join('\n');

    throw new Error(missingErr);
  }

  const babelConfig = tryRead(_path2.default.join(basePath, '.babelrc'));
  const isProd = env === 'production';

  const cssExtractor = new _extractTextWebpackPlugin2.default({
    filename: 'css/main.css',
    allChunks: true,
    ignoreOrder: true,
    disable: !isProd
  });

  const postcssLoader = {
    loader: resolve('postcss-loader'),
    options: {
      config: {
        path: _path2.default.join(__dirname, 'postcss.config.js')
      }
    }
  };

  const cssLoaderLocation = resolve('css-loader');
  const baseCssLoader = `${cssLoaderLocation}?modules&localIdentName=[name]_[local]_[hash:base64:5]&importLoaders=1`;
  const cssLoader = isProd && !skipMinify ? `${baseCssLoader}&minimize` : `${baseCssLoader}&sourceMap`;

  const commonChunkPlugin = (typeof config.commonChunkPlugin === 'undefined' || config.commonChunkPlugin) && new _webpack2.default.optimize.CommonsChunkPlugin({ name: 'vendor', filename: 'js/vendor.bundle.js' });

  return {
    entry: {
      app: [!isProd && resolve('react-hot-loader/patch'), resolve('normalize.css'), _path2.default.join(__dirname, '..', 'browser', isProd ? 'entry.js' : 'entry-dev.js')].filter(Boolean),
      vendor: ['react', 'react-dom']
    },
    output: {
      path: config.outputPath || _path2.default.join(__dirname, '..', '..', 'dist'),
      filename: 'js/[name].bundle.js',
      publicPath: `${staticPath}/`
    },
    resolve: {
      alias: {
        react: _path2.default.dirname(reactPath),
        'react-dom': _path2.default.dirname(reactDomPath),
        moment$: 'moment/moment.js'
      }
    },
    module: {
      rules: [{
        test: /\.jsx?/,
        exclude: /(packages\/@sanity|node_modules|bower_components)/,
        use: {
          loader: resolve('babel-loader'),
          options: babelConfig || {
            presets: [resolve('babel-preset-react'), resolve('babel-preset-es2015')],
            plugins: [resolve('babel-plugin-syntax-class-properties'), resolve('babel-plugin-transform-class-properties'), !isProd && resolve('react-hot-loader/patch')].filter(Boolean),
            cacheDirectory: true
          }
        }
      }, {
        test: /\.css(\?|$)/,
        use: isProd ? _extractTextWebpackPlugin2.default.extract({ use: [cssLoader, postcssLoader] }) : [resolve('style-loader'), cssLoader, postcssLoader]
      }, {
        test: /\.(jpe?g|png|gif|svg|webp|woff|woff2|ttf|eot|otf)$/,
        use: {
          loader: resolve('file-loader'),
          options: { name: 'assets/[name]-[hash].[ext]' }
        }
      }, _v2.default.getPartLoader(wpIntegrationOptions)]
    },
    profile: config.profile || false,
    plugins: [_v2.default.getEnvPlugin(wpIntegrationOptions), new _webpack2.default.ContextReplacementPlugin(/moment[/\\]locale$/, /en|nb/), _v2.default.getPartResolverPlugin(wpIntegrationOptions), cssExtractor, commonChunkPlugin].filter(Boolean)
  };
};

function tryRead(filePath) {
  try {
    // eslint-disable-next-line no-sync
    const content = _fs2.default.readFileSync(filePath);
    return JSON.parse(content);
  } catch (err) {
    return null;
  }
}