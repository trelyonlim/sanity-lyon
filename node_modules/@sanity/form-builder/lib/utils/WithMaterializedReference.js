'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = WithMaterializedReference;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _WithMaterializedDocument = require('./WithMaterializedDocument');

var _WithMaterializedDocument2 = _interopRequireDefault(_WithMaterializedDocument);

var _observable = require('../typedefs/observable');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/*:: import type {Reference} from '../typedefs'*/
/*:: import type {Node} from 'react'*/
/*:: type Props = {
  reference: Reference,
  materialize: string => ObservableI<Object>,
  children: Object => null | Node
}*/


function getRefId(reference /*: ?Reference*/) /*: ?string*/ {
  return reference && reference._ref;
}

function WithMaterializedReference(props /*: Props*/) {
  const reference = props.reference,
        rest = _objectWithoutProperties(props, ['reference']);

  const documentId = getRefId(reference);
  return documentId ? _react2.default.createElement(_WithMaterializedDocument2.default, _extends({}, rest, { documentId: documentId })) : null;
}