'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; //  weak


exports.checkout = checkout;

var _document = require('part:@sanity/base/datastore/document');

var _document2 = _interopRequireDefault(_document);

var _gradientPatchAdapter = require('./utils/gradientPatchAdapter');

var gradientPatchAdapter = _interopRequireWildcard(_gradientPatchAdapter);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*:: import type {Patch} from '../typedefs/patch'*/
function checkout(documentId) {
  const document = _document2.default.checkout(documentId);

  const events$ = document.events.map(event => event.type === 'mutation' ? preparePatchEvent(event) : event).scan((prevEvent, currentEvent) => {
    const deletedSnapshot = prevEvent && currentEvent.type === 'mutation' && prevEvent.document !== null && currentEvent.document === null ? prevEvent.document : null;

    return _extends({}, currentEvent, {
      deletedSnapshot
    });
  }, null);

  function preparePatchEvent(event) {
    const patches = event.mutations.map(mut => mut.patch).filter(Boolean);
    return _extends({}, event, {
      patches: gradientPatchAdapter.toFormBuilder(event.origin, patches)
    });
  }

  return _extends({}, document, {
    events: events$,
    patch(patches /*: Array<Patch>*/) {
      document.patch(gradientPatchAdapter.toGradient(patches));
    }
  });
}