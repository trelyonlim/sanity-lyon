'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _flatten2 = require('lodash/flatten');

var _flatten3 = _interopRequireDefault(_flatten2);

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.getPreviewSnapshot = getPreviewSnapshot;
exports.search = search;

var _client = require('part:@sanity/base/client');

var _client2 = _interopRequireDefault(_client);

var _preview = require('part:@sanity/base/preview');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getPreviewSnapshot(value, referenceType) {
  return (0, _preview.observeForPreview)(value, referenceType).map(result => result.snapshot);
}

function wrapIn(chars = '') {
  var _chars = _slicedToArray(chars, 2),
      _chars$ = _chars[0];

  const start = _chars$ === undefined ? '' : _chars$;
  var _chars$2 = _chars[1];
  const end = _chars$2 === undefined ? start : _chars$2;

  return value => start + value + end;
}

const wrapInParens = wrapIn('()');

function buildConstraintFromType(type, terms) {
  const typeConstraint = `_type == '${type.name}'`;

  const stringFieldPaths = type.__unstable_searchFields || [];
  if (stringFieldPaths.length === 0) {
    return typeConstraint;
  }

  const stringFieldConstraints = (0, _flatten3.default)(stringFieldPaths.map(fieldPath => terms.map(term => `${fieldPath} match '${term}*'`)));

  return `${typeConstraint} && (${stringFieldConstraints.join(' || ')})`;
}

function search(textTerm, referenceType) {
  const terms = textTerm.split(/\s+/);
  const typeConstraints = referenceType.to.map(type => buildConstraintFromType(type, terms));

  const query = `*[!(_id in path('drafts.**')) && (${typeConstraints.map(wrapInParens).join('||')})]`;

  return _client2.default.observable.fetch(query, { term: `${textTerm}*` });
}