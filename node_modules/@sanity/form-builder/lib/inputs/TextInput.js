'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _default = require('part:@sanity/components/formfields/default');

var _default2 = _interopRequireDefault(_default);

var _default3 = require('part:@sanity/components/textareas/default');

var _default4 = _interopRequireDefault(_default3);

var _PatchEvent = require('../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/*:: import type {Type, Marker} from '../typedefs'*/
/*:: type Props = {
  type: Type,
  level: number,
  value: ?string,
  readOnly: ?boolean,
  onChange: PatchEvent => void,
  markers: Array<Marker>
}*/
class TextInput extends _react2.default.Component /*:: <Props>*/ {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.handleChange = (event /*: SyntheticEvent<HTMLInputElement>*/) => {
      const value = event.currentTarget.value;
      this.props.onChange(_PatchEvent2.default.from(value ? (0, _PatchEvent.set)(value) : (0, _PatchEvent.unset)()));
    }, this.setInput = (input /*: ?TextArea*/) => {
      this._input = input;
    }, _temp;
  }

  focus() {
    if (this._input) {
      this._input.focus();
    }
  }

  render() {
    var _props = this.props;

    const value = _props.value,
          markers = _props.markers,
          type = _props.type,
          readOnly = _props.readOnly,
          level = _props.level,
          rest = _objectWithoutProperties(_props, ['value', 'markers', 'type', 'readOnly', 'level']);

    const validation = markers.filter(marker => marker.type === 'validation');
    const errors = validation.filter(marker => marker.level === 'error');

    return _react2.default.createElement(
      _default2.default,
      { markers: markers, level: level, label: type.title, description: type.description },
      _react2.default.createElement(_default4.default, _extends({}, rest, {
        customValidity: errors && errors.length > 0 ? errors[0].item.message : '',
        value: value,
        readOnly: readOnly,
        placeholder: type.placeholder,
        onChange: this.handleChange,
        rows: type.rows,
        ref: this.setInput
      }))
    );
  }
}
exports.default = TextInput;