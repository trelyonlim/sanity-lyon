'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _default = require('part:@sanity/components/formfields/default');

var _default2 = _interopRequireDefault(_default);

var _textfield = require('part:@sanity/components/tags/textfield');

var _textfield2 = _interopRequireDefault(_textfield);

var _PatchEvent = require('../../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/*:: import type {Type} from '../../typedefs'*/
/*:: type Props = {
  type: Type,
  value: Array<string>,
  level: number,
  readOnly: ?boolean,
  onChange: PatchEvent => void
}*/
class TagsArrayInput extends _react2.default.PureComponent /*:: <Props>*/ {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.handleChange = (nextValue /*: Array<string>*/) => {
      this.set(nextValue);
    }, this.setInput = (el /*: ?TagInput*/) => {
      this._input = el;
    }, _temp;
  }

  set(nextValue /*: string[]*/) {
    const patch = nextValue.length === 0 ? (0, _PatchEvent.unset)() : (0, _PatchEvent.set)(nextValue);
    this.props.onChange(_PatchEvent2.default.from(patch));
  }

  focus() {
    if (this._input) {
      this._input.focus();
    }
  }

  render() {
    var _props = this.props;

    const type = _props.type,
          value = _props.value,
          readOnly = _props.readOnly,
          level = _props.level,
          rest = _objectWithoutProperties(_props, ['type', 'value', 'readOnly', 'level']);

    return _react2.default.createElement(
      _default2.default,
      { level: level, label: type.title, description: type.description },
      _react2.default.createElement(_textfield2.default, _extends({}, rest, {
        readOnly: readOnly,
        value: value,
        onChange: this.handleChange,
        ref: this.setInput
      }))
    );
  }
}
exports.default = TagsArrayInput;