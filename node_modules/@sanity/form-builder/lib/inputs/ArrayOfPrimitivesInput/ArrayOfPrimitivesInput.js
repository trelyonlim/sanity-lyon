'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _default = require('part:@sanity/components/lists/default');

var _sortable = require('part:@sanity/components/lists/sortable');

var _default2 = require('part:@sanity/components/fieldsets/default');

var _default3 = _interopRequireDefault(_default2);

var _default4 = require('part:@sanity/components/buttons/default');

var _default5 = _interopRequireDefault(_default4);

var _Item = require('./Item');

var _Item2 = _interopRequireDefault(_Item);

var _ArrayOfPrimitivesInput = require('./styles/ArrayOfPrimitivesInput.css');

var _ArrayOfPrimitivesInput2 = _interopRequireDefault(_ArrayOfPrimitivesInput);

var _PatchEvent = require('../../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

var _dropdown = require('part:@sanity/components/buttons/dropdown');

var _dropdown2 = _interopRequireDefault(_dropdown);

var _getEmptyValue = require('./getEmptyValue');

var _getEmptyValue2 = _interopRequireDefault(_getEmptyValue);

var _pathUtils = require('../../utils/pathUtils');

var _resolveTypeName = require('../../utils/resolveTypeName');

var _InvalidValueInput = require('../InvalidValueInput');

var _InvalidValueInput2 = _interopRequireDefault(_InvalidValueInput);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*:: import type {ItemValue} from '../ArrayInput/typedefs'*/
/*:: import type {Path} from '../../typedefs/path'*/
/*:: import type {Type, Marker} from '../../typedefs'*/


function move(arr, from, to) {
  const copy = arr.slice();
  const val = copy[from];
  copy.splice(from, 1);
  copy.splice(to, 0, val);
  return copy;
}

function insertAt(arr, index, item) {
  const copy = arr.slice();
  copy.splice(index + 1, 0, item);
  return copy;
}

/*:: type Props = {
  type: Type,
  value: Array<ItemValue>,
  level: number,
  onChange: (event: PatchEvent) => void,
  onFocus: Path => void,
  onBlur: () => void,
  focusPath: Path,
  readOnly: ?boolean,
  markers: Array<Marker>
}*/
class ArrayOfPrimitivesInput extends _react2.default.PureComponent /*:: <Props>*/ {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this._lastAddedIndex = -1, this.handleRemoveItem = (index /*: number*/) => {
      this.removeAt(index);
    }, this.handleDropDownAction = action => {
      this.append(action.type);
    }, this.handleAddBtnClick = () => {
      this.append(this.props.type.of[0]);
    }, this.handleItemChange = event => {
      this._lastAddedIndex = -1;
      this.props.onChange(event);
    }, this.handleItemEnterKey = index => {
      this.insertAt(index, this.props.type.of[0]);
      this._lastAddedIndex = index + 1;
    }, this.handleItemEscapeKey = index => {
      const value = this.props.value;

      if (index === this._lastAddedIndex && value[index] === '') {
        this.removeAt(index);
      }
    }, this.handleSortEnd = event => {
      const value = this.props.value;
      const oldIndex = event.oldIndex,
            newIndex = event.newIndex;

      this.set(move(value, oldIndex, newIndex));
    }, this.renderItem = (item, index) => {
      var _props = this.props;
      const type = _props.type,
            level = _props.level,
            markers = _props.markers,
            value = _props.value,
            focusPath = _props.focusPath,
            onChange = _props.onChange,
            onFocus = _props.onFocus,
            readOnly = _props.readOnly,
            onBlur = _props.onBlur;


      const typeName = (0, _resolveTypeName.resolveTypeName)(item);
      const itemMemberType = this.getMemberType(typeName);

      if (!itemMemberType) {
        return _react2.default.createElement(_InvalidValueInput2.default, {
          key: index,
          actualType: typeName,
          validTypes: type.of.map(memberType => memberType.name),
          onChange: function (_onChange) {
            function onChange(_x) {
              return _onChange.apply(this, arguments);
            }

            onChange.toString = function () {
              return _onChange.toString();
            };

            return onChange;
          }(ev => onChange(ev.prefixAll(index))),
          value: value
        });
      }

      const isSortable = (0, _get3.default)(type, 'options.sortable') !== false;
      const ListItem = isSortable ? _sortable.Item : _default.Item;
      const filteredMarkers = markers.filter(marker => (0, _pathUtils.startsWith)([index], marker.path));

      return _react2.default.createElement(
        ListItem,
        { key: index, index: index, className: _ArrayOfPrimitivesInput2.default.item },
        _react2.default.createElement(_Item2.default, {
          level: level + 1,
          index: index,
          value: item,
          readOnly: readOnly,
          markers: filteredMarkers,
          isSortable: isSortable,
          type: itemMemberType,
          focusPath: focusPath,
          onFocus: onFocus,
          onBlur: onBlur,
          onEnterKey: this.handleItemEnterKey,
          onEscapeKey: this.handleItemEscapeKey,
          onChange: this.handleItemChange,
          onRemove: this.handleRemoveItem
        })
      );
    }, this.setElement = (el /*: ?Fieldset*/) => {
      this._element = el;
    }, _temp;
  }

  set(nextValue /*: any[]*/) {
    this._lastAddedIndex = -1;
    const patch = nextValue.length === 0 ? (0, _PatchEvent.unset)() : (0, _PatchEvent.set)(nextValue);
    this.props.onChange(_PatchEvent2.default.from(patch));
  }

  removeAt(index /*: number*/) {
    var _props$value = this.props.value;
    const value = _props$value === undefined ? [] : _props$value;

    this.set(value.filter((_, i) => i !== index));
    this.props.onFocus([Math.max(0, index - 1)]);
  }

  append(type) {
    var _props2 = this.props,
        _props2$value = _props2.value;
    const value = _props2$value === undefined ? [] : _props2$value,
          onFocus = _props2.onFocus;

    this.set(value.concat((0, _getEmptyValue2.default)(type)));
    onFocus([value.length]);
  }

  insertAt(index, type) {
    var _props3 = this.props,
        _props3$value = _props3.value;
    const value = _props3$value === undefined ? [] : _props3$value,
          onFocus = _props3.onFocus;

    this.set(insertAt(value, index, (0, _getEmptyValue2.default)(type)));
    onFocus([index + 1]);
  }

  getMemberType(typeName) {
    const type = this.props.type;

    return type.of.find(memberType => memberType.name === typeName || memberType.jsonType === typeName);
  }

  renderList(value) {
    const type = this.props.type;

    const isSortable = (0, _get3.default)(type, 'options.sortable') !== false;
    return isSortable ? _react2.default.createElement(
      _sortable.List,
      {
        className: _ArrayOfPrimitivesInput2.default.list,
        onSortEnd: this.handleSortEnd,
        movingItemClass: _ArrayOfPrimitivesInput2.default.movingItem,
        useDragHandle: true
      },
      value.map(this.renderItem)
    ) : _react2.default.createElement(
      _default.List,
      { decoration: 'divider' },
      value.map(this.renderItem)
    );
  }

  focus() {
    if (this._element) {
      this._element.focus();
    }
  }

  renderSelectType() {
    const type = this.props.type;


    const items = type.of.map(memberDef => ({
      title: memberDef.title || memberDef.type.name,
      type: memberDef
    }));

    return _react2.default.createElement(
      _dropdown2.default,
      { items: items, onAction: this.handleDropDownAction },
      'New ',
      this.props.type.title
    );
  }

  render() {
    var _props4 = this.props;
    const type = _props4.type,
          value = _props4.value,
          level = _props4.level,
          markers = _props4.markers,
          readOnly = _props4.readOnly,
          onFocus = _props4.onFocus;

    return _react2.default.createElement(
      _default3.default,
      {
        legend: type.title,
        description: type.description,
        level: level,
        tabIndex: 0,
        onFocus: onFocus,
        ref: this.setElement,
        markers: markers
      },
      _react2.default.createElement(
        'div',
        { className: _ArrayOfPrimitivesInput2.default.root },
        _react2.default.createElement(
          'div',
          { className: _ArrayOfPrimitivesInput2.default.list },
          value && value.length > 0 && this.renderList(value)
        ),
        !readOnly && _react2.default.createElement(
          'div',
          { className: _ArrayOfPrimitivesInput2.default.functions },
          type.of.length === 1 ? _react2.default.createElement(
            _default5.default,
            { onClick: this.handleAddBtnClick, className: _ArrayOfPrimitivesInput2.default.addButton },
            'Add'
          ) : this.renderSelectType()
        )
      )
    );
  }
}
exports.default = ArrayOfPrimitivesInput;