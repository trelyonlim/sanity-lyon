'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _uniqueId2 = require('lodash/uniqueId');

var _uniqueId3 = _interopRequireDefault(_uniqueId2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _reactDatepicker = require('react-datepicker');

var _reactDatepicker2 = _interopRequireDefault(_reactDatepicker);

require('react-datepicker/dist/react-datepicker-cssmodules.css');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _default = require('part:@sanity/components/formfields/default');

var _default2 = _interopRequireDefault(_default);

var _default3 = require('part:@sanity/components/textinputs/default');

var _default4 = _interopRequireDefault(_default3);

var _DateTimeInput = require('./styles/DateTimeInput.css');

var _DateTimeInput2 = _interopRequireDefault(_DateTimeInput);

var _PatchEvent = require('../../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

var _default5 = require('part:@sanity/components/dialogs/default');

var _default6 = _interopRequireDefault(_default5);

var _default7 = require('part:@sanity/components/buttons/default');

var _default8 = _interopRequireDefault(_default7);

var _calendarIcon = require('part:@sanity/base/calendar-icon');

var _calendarIcon2 = _interopRequireDefault(_calendarIcon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/*:: import type Moment from 'moment'*/ // eslint-disable-line import/no-unassigned-import

/*:: import type {Marker} from '../../typedefs'*/
/*:: type ParsedOptions = {
  dateFormat: string,
  timeFormat: string,
  timeStep: number,
  calendarTodayLabel: string
}*/
/*:: type SchemaOptions = {
  dateFormat?: string,
  timeFormat?: string,
  timeStep?: number,
  calendarTodayLabel?: string
}*/


const DEFAULT_DATE_FORMAT = 'YYYY-MM-DD';
const DEFAULT_TIME_FORMAT = 'HH:mm';

/*:: type Props = {
  value: string,
  markers: Array<Marker>,
  type: {
    name: string,
    title: string,
    description: string,
    options?: SchemaOptions
  },
  readOnly: ?boolean,
  onChange: PatchEvent => void,
  level: number
}*/


function parseOptions(options /*: SchemaOptions*/ = {}) /*: ParsedOptions*/ {
  return {
    dateFormat: options.dateFormat || DEFAULT_DATE_FORMAT,
    timeFormat: options.timeFormat || DEFAULT_TIME_FORMAT,
    timeStep: 'timeStep' in options && Number(options.timeStep) || 15,
    calendarTodayLabel: options.calendarTodayLabel || 'Today'
  };
}

const getFormat = (options /*: ParsedOptions*/) => `${options.dateFormat} ${options.timeFormat}`;

/*:: type State = {
  inputValue: ?string
}*/
class DateInput extends _react2.default.Component /*:: <Props, State>*/ {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.inputId = (0, _uniqueId3.default)('date-input'), this.state = {
      inputValue: null,
      isActive: false
    }, this.handleInputChange = (event /*: SyntheticEvent<HTMLInputElement>*/) => {
      const inputValue = event.currentTarget.value;
      const parsed = (0, _moment2.default)(inputValue, getFormat(parseOptions(this.props.type.options)), true);
      if (parsed.isValid()) {
        this.setMoment(parsed);
      } else {
        this.setState({ inputValue: inputValue });
      }
    }, this.handleChange = (nextMoment /*: Moment*/) => {
      this.setState({ inputValue: null });
      if (nextMoment) {
        this.setMoment(nextMoment);
      } else {
        this.unset();
      }
    }, this.handleBlur = () => {
      this.setState({ inputValue: null });
    }, this.setDatePicker = (datePicker /*: ?DatePicker*/) => {
      this._datepicker = datePicker;
    }, this.setDialogDatePicker = (datePicker /*: ?DatePicker*/) => {
      this._dialogdatepicker = datePicker;
    }, this.handleKeyDown = event => {
      if (event.key === 'Enter') {
        this.handleOpen();
      }
    }, this.handleClose = event => {
      this.setState({
        isActive: false
      });
    }, this.handleOpen = () => {
      this.setState({
        isActive: true
      });
    }, this.handleDialogAction = action => {
      if (action.name === 'close') {
        this.handleClose();
      }

      if (action.name === 'today') {
        this.setMoment((0, _moment2.default)());
      }
    }, _temp;
  }

  setMoment(nextMoment /*: Moment*/) {
    this.set(nextMoment.toDate().toJSON());
    this.setState({ inputValue: null });
  }

  set(value /*: string*/) {
    this.props.onChange(_PatchEvent2.default.from([(0, _PatchEvent.set)(value)]));
  }

  unset() {
    this.props.onChange(_PatchEvent2.default.from([(0, _PatchEvent.unset)()]));
  }
  focus() {
    if (this._datepicker) {
      this._datepicker.input.focus();
    }
  }

  render() {
    var _props = this.props;

    const value = _props.value,
          markers = _props.markers,
          type = _props.type,
          readOnly = _props.readOnly,
          level = _props.level,
          rest = _objectWithoutProperties(_props, ['value', 'markers', 'type', 'readOnly', 'level']);

    var _state = this.state;
    const inputValue = _state.inputValue,
          isActive = _state.isActive;
    const title = type.title,
          description = type.description;

    const momentValue /*: ?Moment*/ = value ? (0, _moment2.default)(value) : null;

    const options = parseOptions(type.options);

    const placeholder = type.placeholder || `e.g. ${(0, _moment2.default)().format(getFormat(options))}`;

    const DIALOG_ACTIONS = [{
      index: 1,
      name: 'close',
      title: 'Close'
    }, {
      index: 2,
      name: 'today',
      kind: 'simple',
      color: 'primary',
      title: options.calendarTodayLabel,
      secondary: true
    }];

    const validation = markers.filter(marker => marker.type === 'validation');
    const errors = validation.filter(marker => marker.level === 'error');

    return _react2.default.createElement(
      _default2.default,
      {
        markers: markers,
        labelFor: this.inputId,
        label: title,
        level: level,
        description: description
      },
      readOnly && _react2.default.createElement(_default4.default, {
        customValidity: errors.length > 0 ? errors[0].item.message : '',
        readOnly: true,
        value: momentValue ? momentValue.format(getFormat(options)) : ''
      }),
      !readOnly && _react2.default.createElement(
        'div',
        { className: errors.length > 0 ? _DateTimeInput2.default.inputWrapperWithError : _DateTimeInput2.default.inputWrapper },
        _react2.default.createElement(_reactDatepicker2.default, _extends({}, options, rest, {
          onKeyDown: this.handleKeyDown,
          disabledKeyboardNavigation: true,
          selected: momentValue || undefined,
          placeholderText: placeholder,
          calendarClassName: _DateTimeInput2.default.datepicker,
          popperClassName: _DateTimeInput2.default.hiddenPopper,
          className: _DateTimeInput2.default.input,
          onChange: this.handleChange,
          onChangeRaw: this.handleInputChange,
          value: inputValue ? inputValue : momentValue && momentValue.format(getFormat(options)),
          dateFormat: options.dateFormat,
          timeFormat: options.timeFormat,
          timeIntervals: options.timeStep,
          ref: this.setDatePicker
        })),
        _react2.default.createElement(
          _default8.default,
          {
            color: 'primary',
            className: _DateTimeInput2.default.selectButton,
            onClick: this.handleOpen,
            icon: _calendarIcon2.default,
            kind: 'simple'
          },
          'Select'
        )
      ),
      isActive && _react2.default.createElement(
        _default6.default,
        {
          isOpen: isActive,
          onClose: this.handleClose,
          onAction: this.handleDialogAction,
          actions: DIALOG_ACTIONS,
          showCloseButton: false
        },
        _react2.default.createElement(
          'div',
          { className: _DateTimeInput2.default.rootWithTime },
          _react2.default.createElement(_reactDatepicker2.default, _extends({}, options, rest, {
            inline: true,
            showMonthDropdown: true,
            showYearDropdown: true,
            selected: momentValue || undefined,
            calendarClassName: _DateTimeInput2.default.datepicker,
            popperClassName: _DateTimeInput2.default.popper,
            className: _DateTimeInput2.default.input,
            onChange: this.handleChange,
            onChangeRaw: this.handleInputChange,
            value: inputValue ? inputValue : momentValue && momentValue.format(getFormat(options)),
            showTimeSelect: true,
            dateFormat: options.dateFormat,
            timeFormat: options.timeFormat,
            timeIntervals: options.timeStep,
            ref: this.setDialogDatePicker,
            dropdownMode: 'select'
          }))
        )
      )
    );
  }
}
exports.default = DateInput;