'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _throttle2 = require('lodash/throttle');

var _throttle3 = _interopRequireDefault(_throttle2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _class, _temp;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _blockTools = require('@sanity/block-tools');

var _blockTools2 = _interopRequireDefault(_blockTools);

var _generateHelpUrl = require('@sanity/generate-help-url');

var _generateHelpUrl2 = _interopRequireDefault(_generateHelpUrl);

var _default = require('part:@sanity/components/formfields/default');

var _default2 = _interopRequireDefault(_default);

var _BlockEditor = require('./BlockEditor');

var _BlockEditor2 = _interopRequireDefault(_BlockEditor);

var _slate = require('slate');

var _PatchEvent = require('../../PatchEvent');

var _PatchEvent2 = _interopRequireDefault(_PatchEvent);

var _withPatchSubscriber = require('../../utils/withPatchSubscriber');

var _withPatchSubscriber2 = _interopRequireDefault(_withPatchSubscriber);

var _default3 = require('part:@sanity/components/buttons/default');

var _default4 = _interopRequireDefault(_default3);

var _Syncer = require('./styles/Syncer.css');

var _Syncer2 = _interopRequireDefault(_Syncer);

var _simplePatch = require('../../simplePatch');

var _simplePatch2 = _interopRequireDefault(_simplePatch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function deserialize(value, type) {
  return _slate.State.fromJSON(_blockTools2.default.blocksToSlateState(value, type));
}

function serialize(state, type) {
  return _blockTools2.default.slateStateToBlocks(state.toJSON({ preserveKeys: true }), type);
}

function isDocumentEqual(slateState, otherSlateState) {
  return slateState.get('document') === otherSlateState.get('document');
}

function isDeprecatedBlockSchema(type) {
  const blockType = type.of.find(ofType => ofType.name === 'block');
  if (blockType.span !== undefined) {
    return true;
  }
  return false;
}

function isDeprecatedBlockValue(value) {
  if (!value) {
    return false;
  }
  const block = value.find(item => item._type === 'block');
  if (block && Object.keys(block).includes('spans')) {
    return true;
  }
  return false;
}

exports.default = (0, _withPatchSubscriber2.default)((_temp = _class = class Syncer extends _react2.default.PureComponent {

  constructor(props) {
    super();

    this.handleNodePatch = patchEvent => {
      this.setState(prevState => {
        if (prevState.isOutOfSync) {
          return prevState;
        }
        const nextValue = patchEvent.patches.reduce((state, patch) => {
          var _patch$path = _toArray(patch.path);

          const key = _patch$path[0],
                path = _patch$path.slice(1);

          const nodeValue = state.document.getDescendant(key).data.get('value');
          const change = state.change().setNodeByKey(key, {
            data: { value: (0, _simplePatch2.default)(nodeValue, _extends({}, patch, { path })) }
          });
          return change.state;
        }, prevState.value);

        return { value: nextValue };
      });
    };

    this.handleChange = slateChange => {
      this.setState(prevState => prevState.isOutOfSync ? {} : { value: slateChange.state });
    };

    this.receivePatches = ({ snapshot, shouldReset, patches }) => {
      if (patches.some(patch => patch.origin === 'remote')) {
        this.setState({ isOutOfSync: true });
      }

      if (shouldReset) {}
      // @todo
      // eslint-disable-next-line no-console
      // console.warn('[BlockEditor] Reset state due to set patch that targeted ancestor path:', patches)
      // this.setState({value: deserialize(snapshot, this.props.type)})
      // else {
      //   // console.log('TODO: Apply patches:', patches)
      // }
    };

    this.handleSynchronize = () => {
      this.setState({
        value: deserialize(this.props.value, this.props.type),
        isOutOfSync: false
      });
    };

    this.emitSet = (0, _throttle3.default)(() => {
      const onChange = this.props.onChange;
      // const onChange = event => console.log(event.patch.type, event.patch.value)

      const value = this.state.value;

      const nextVal = serialize(value);

      onChange(_PatchEvent2.default.from(nextVal ? (0, _PatchEvent.set)(nextVal) : (0, _PatchEvent.unset)()));
    }, 1000, { trailing: true });
    const deprecatedSchema = isDeprecatedBlockSchema(props.type);
    const deprecatedBlockValue = isDeprecatedBlockValue(props.value);
    this.state = {
      isOutOfSync: false,
      deprecatedSchema,
      deprecatedBlockValue,
      value: deprecatedSchema || deprecatedBlockValue ? undefined : deserialize(props.value, props.type)
    };
    this.unsubscribe = props.subscribe(this.receivePatches);
  }

  focus() {
    if (this._blockEditor) {
      this._blockEditor.focus();
    }
  }

  setBlockEditor(blockEditor /*: ?BlockEditor*/) {
    this._blockEditor = blockEditor;
  }

  componentWillUnmount() {
    // This is a defensive workaround for an issue causing content to be overwritten
    // It cancels any pending saves, so if the component gets unmounted within the
    // 1 second window, work may be lost.
    // This is by no means ideal, but preferable to overwriting content in other documents
    // Should be fixed by making the block editor "real" realtime
    this.emitSet.cancel();

    this.unsubscribe();
  }

  componentDidUpdate(prevProps, prevState) {
    const didSync = prevState.isOutOfSync && !this.state.isOutOfSync;
    if (!didSync && !isDocumentEqual(prevState.value, this.state.value)) {
      this.emitSet();
    }
  }

  render() {
    var _state = this.state;
    const value = _state.value,
          isOutOfSync = _state.isOutOfSync,
          deprecatedSchema = _state.deprecatedSchema,
          deprecatedBlockValue = _state.deprecatedBlockValue;

    const isDeprecated = deprecatedSchema || deprecatedBlockValue;
    const type = this.props.type;

    return _react2.default.createElement(
      'div',
      { className: _Syncer2.default.root },
      !isDeprecated && _react2.default.createElement(_BlockEditor2.default, _extends({}, this.props, {
        disabled: isOutOfSync,
        onChange: this.handleChange,
        onNodePatch: this.handleNodePatch,
        value: value,
        ref: this._setBlockEditor
      })),
      isDeprecated && _react2.default.createElement(
        _default2.default,
        { label: type.title },
        _react2.default.createElement(
          'div',
          { className: _Syncer2.default.disabledEditor },
          _react2.default.createElement(
            'strong',
            null,
            'Heads up!'
          ),
          _react2.default.createElement(
            'p',
            null,
            'You\'re using a new version of the Studio with',
            deprecatedSchema && " a block schema that hasn't been updated.",
            deprecatedSchema && deprecatedBlockValue && ' Also block text needs to be updated.',
            deprecatedBlockValue && !deprecatedSchema && " block text that hasn't been updated."
          ),
          _react2.default.createElement(
            'p',
            null,
            _react2.default.createElement(
              'a',
              {
                href: (0, _generateHelpUrl2.default)('migrate-to-block-children'),
                rel: 'noopener noreferrer',
                target: '_blank'
              },
              'Read more'
            )
          )
        )
      ),
      isOutOfSync && _react2.default.createElement(
        'div',
        { className: _Syncer2.default.isOutOfSyncWarning },
        'Heads up! Someone else edited this field. Make sure to let your co-workers know that you are working on this part of the document!',
        _react2.default.createElement('br', null),
        'We\'re sorry for the inconvenience and working hard to get it working properly.',
        _react2.default.createElement(
          'p',
          null,
          _react2.default.createElement(
            _default4.default,
            { inverted: true, kind: 'primary', onClick: this.handleSynchronize },
            'Load remote changes'
          )
        )
      )
    );
  }
}, _class.propTypes = {
  schema: _propTypes2.default.object,
  value: _propTypes2.default.array,
  type: _propTypes2.default.object.isRequired,
  onChange: _propTypes2.default.func,
  subscribe: _propTypes2.default.func
}, _temp));