'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _offsetKey = require('slate-react/lib/utils/offset-key');

var _offsetKey2 = _interopRequireDefault(_offsetKey);

var _setTransferData = require('slate-react/lib/utils/set-transfer-data');

var _setTransferData2 = _interopRequireDefault(_setTransferData);

var _transferTypes = require('slate-react/lib/constants/transfer-types');

var _transferTypes2 = _interopRequireDefault(_transferTypes);

var _slateBase64Serializer = require('slate-base64-serializer');

var _slateBase64Serializer2 = _interopRequireDefault(_slateBase64Serializer);

var _slateReact = require('slate-react');

var _FormBuilderInput = require('../../FormBuilderInput');

var _default = require('part:@sanity/components/dialogs/default');

var _default2 = _interopRequireDefault(_default);

var _fullscreen = require('part:@sanity/components/dialogs/fullscreen');

var _fullscreen2 = _interopRequireDefault(_fullscreen);

var _default3 = require('part:@sanity/components/buttons/default');

var _default4 = _interopRequireDefault(_default3);

var _popover = require('part:@sanity/components/dialogs/popover');

var _popover2 = _interopRequireDefault(_popover);

var _fold = require('part:@sanity/components/edititem/fold');

var _fold2 = _interopRequireDefault(_fold);

var _Preview = require('../../Preview');

var _Preview2 = _interopRequireDefault(_Preview);

var _FormBuilderBlock = require('./styles/FormBuilderBlock.css');

var _FormBuilderBlock2 = _interopRequireDefault(_FormBuilderBlock);

var _createRange = require('./util/createRange');

var _createRange2 = _interopRequireDefault(_createRange);

var _resolveTypeName = require('../../utils/resolveTypeName');

var _InvalidValueInput = require('../InvalidValueInput');

var _InvalidValueInput2 = _interopRequireDefault(_InvalidValueInput);

var _SimpleFocusManager = require('../../sanity/focusManagers/SimpleFocusManager');

var _SimpleFocusManager2 = _interopRequireDefault(_SimpleFocusManager);

var _editIcon = require('part:@sanity/base/edit-icon');

var _editIcon2 = _interopRequireDefault(_editIcon);

var _StopPropagation = require('./StopPropagation');

var _StopPropagation2 = _interopRequireDefault(_StopPropagation);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DIALOG_ACTIONS = [{
  index: '1',
  name: 'close',
  title: 'Close'
  // {
  //   index: '2',
  //   name: 'delete',
  //   kind: 'simple',
  //   title: 'Delete',
  //   color: 'danger',
  //   secondary: true
  // }
}];

class FormBuilderBlock extends _react2.default.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.state = {
      isSelected: false,
      isEditing: false,
      isDragging: false
    }, this._dropTarget = null, this._editorNode = null, this.handleChange = event => {
      var _props = this.props;
      const onPatch = _props.onPatch,
            node = _props.node;

      onPatch(event.prefixAll(node.key));
    }, this.handleInvalidValueChange = event => {
      var _props2 = this.props;
      const onPatch = _props2.onPatch,
            node = _props2.node;

      onPatch(event.prefixAll(node.key));
    }, this.handleDragStart = event => {
      const editor = this.props.editor;

      this._editorNode = _reactDom2.default.findDOMNode(editor);

      this.setState({ isDragging: true });
      this.addDragHandlers();

      const element = _reactDom2.default.findDOMNode(this.previewContainer);
      const encoded = _slateBase64Serializer2.default.serializeNode(this.props.node, { preserveKeys: true });
      (0, _setTransferData2.default)(event.dataTransfer, _transferTypes2.default.NODE, encoded);
      event.dataTransfer.effectAllowed = 'move';
      event.dataTransfer.setDragImage(element, element.clientWidth / 2, -10);
    }, this.handleSelectionChange = event => {
      if (!this._editorNode || !this._editorNode.contains(event.target)) {
        return;
      }
      const selection = document.getSelection();
      const isSelected = selection.containsNode && selection.containsNode(this.formBuilderBlock);
      this.setState({ isSelected });
    }, this.handleDragLeave = event => {
      this.hideBlockDragMarker();
      if (event.target === this._editorNode) {
        this.resetDropTarget();
      }
    }, this.handleDragOverOtherNode = event => {
      if (!this.state.isDragging) {
        return;
      }

      const targetDOMNode = event.target;

      // As the event is registered on the editor parent node
      // ignore the event if it is coming from from the editor node itself
      if (targetDOMNode === this._editorNode) {
        return;
      }

      const offsetKey = _offsetKey2.default.findKey(targetDOMNode, 0);
      if (!offsetKey) {
        return;
      }
      const key = offsetKey.key;
      const editor = this.props.editor;

      const state = editor.getState();
      const document = state.document;

      const range = (0, _createRange2.default)(event);

      if (range === null) {
        return;
      }

      const rangeIsAtStart = range.rangeIsAtStart,
            rangeOffset = range.rangeOffset;


      const node = document.getClosestBlock(key);

      if (!node) {
        this.resetDropTarget();
        return;
      }

      const domNode = (0, _slateReact.findDOMNode)(node);
      if (rangeIsAtStart) {
        this.showBlockDragMarker('before', domNode);
      } else {
        this.showBlockDragMarker('after', domNode);
      }
      this._dropTarget = { node: node, isAtStart: rangeIsAtStart, offset: rangeOffset };
    }, this.handleDragEnd = event => {
      this.setState({ isDragging: false });
      this.removeDragHandlers();

      var _props3 = this.props;
      const editor = _props3.editor,
            node = _props3.node;

      const state = editor.getState();

      const target = this._dropTarget;

      // Return if this is our node
      if (!target || target.node === node) {
        this.resetDropTarget();
        return;
      }

      let nextChange = state.change().removeNodeByKey(node.key);
      nextChange = nextChange[target.isAtStart ? 'collapseToStartOf' : 'collapseToEndOf'](target.node).insertBlock(node).collapseToEndOf(node).focus();

      editor.onChange(nextChange);

      this.resetDropTarget();
    }, this.handleCancelEvent = event => {
      event.preventDefault();
    }, this.handleToggleEdit = () => {
      this.setState({ isEditing: true });
    }, this.handleClose = () => {
      this.setState({ isEditing: false });
    }, this.handleDialogAction = action => {
      if (action.name === 'close') {
        this.handleClose();
      }
      if (action.name === 'delete') {
        // Implement delete
      }
    }, this.refFormBuilderBlock = formBuilderBlock => {
      this.formBuilderBlock = formBuilderBlock;
    }, this.refPreview = previewContainer => {
      this.previewContainer = previewContainer;
    }, this.renderFormBuilderInput = ({ onFocus, onBlur, focusPath }) => {
      const value = this.getValue();
      const memberType = this.getMemberTypeOf(value);

      return _react2.default.createElement(
        'div',
        { style: { padding: '1rem' } },
        _react2.default.createElement(_FormBuilderInput.FormBuilderInput, {
          type: memberType,
          level: 1,
          value: value,
          onChange: this.handleChange,
          onFocus: onFocus,
          onBlur: onBlur,
          focusPath: focusPath,
          path: [{ _key: value._key }]
        })
      );
    }, _temp;
  }

  componentDidMount() {
    this.addSelectionHandler();
  }

  componentWillUnmount() {
    this.removeSelectionHandler();
  }

  addSelectionHandler() {
    document.addEventListener('selectionchange', this.handleSelectionChange);
  }

  removeSelectionHandler() {
    document.removeEventListener('selectionchange', this.handleSelectionChange);
  }

  addDragHandlers() {
    this._editorNode.addEventListener('dragover', this.handleDragOverOtherNode);
    this._editorNode.addEventListener('dragleave', this.handleDragLeave);
  }

  removeDragHandlers() {
    this._editorNode.removeEventListener('dragover', this.handleDragOverOtherNode);
    this._editorNode.removeEventListener('dragleave', this.handleDragLeave);
  }

  // Remove the drop target if we leave the editors nodes


  resetDropTarget() {
    this._dropTarget = null;
    this.hideBlockDragMarker();
  }

  getValue() {
    return this.props.node.data.get('value');
  }

  getMemberTypeOf(value) {
    const typeName = (0, _resolveTypeName.resolveTypeName)(value);
    return this.props.type.of.find(memberType => memberType.name === typeName);
  }

  renderPreview() {
    const value = this.getValue();
    const memberType = this.getMemberTypeOf(value);

    if (!memberType) {
      const validMemberTypes = this.props.type.of.map(type => type.name);
      const actualType = (0, _resolveTypeName.resolveTypeName)(value);
      return _react2.default.createElement(_InvalidValueInput2.default, {
        validTypes: validMemberTypes,
        actualType: actualType,
        value: value,
        onChange: this.handleInvalidValueChange
      });
    }

    return _react2.default.createElement(_Preview2.default, { type: memberType, value: this.getValue(), layout: 'block' });
  }

  renderInput() {
    const editModalLayout = (0, _get3.default)(this.props.type.options, 'editModal');

    const input = _react2.default.createElement(
      _SimpleFocusManager2.default,
      null,
      this.renderFormBuilderInput
    );

    if (editModalLayout === 'fullscreen') {
      return _react2.default.createElement(
        _fullscreen2.default,
        { isOpen: true, title: this.props.node.title, onClose: this.handleClose },
        input
      );
    }

    if (editModalLayout === 'fold') {
      return _react2.default.createElement(
        'div',
        { className: _FormBuilderBlock2.default.editBlockContainerFold },
        _react2.default.createElement(
          _fold2.default,
          { isOpen: true, title: this.props.node.title, onClose: this.handleClose },
          input
        )
      );
    }

    if (editModalLayout === 'popover') {
      return _react2.default.createElement(
        'div',
        { className: _FormBuilderBlock2.default.editBlockContainerPopOver },
        _react2.default.createElement(
          _popover2.default,
          {
            title: this.props.node.title,
            onClose: this.handleClose,
            onEscape: this.handleClose,
            onClickOutside: this.handleClose,
            onAction: this.handleDialogAction,
            actions: DIALOG_ACTIONS
          },
          input
        )
      );
    }
    return _react2.default.createElement(
      _default2.default,
      {
        isOpen: true,
        title: this.props.node.title,
        onClose: this.handleClose,
        showCloseButton: false,
        onAction: this.handleDialogAction,
        actions: DIALOG_ACTIONS
      },
      input
    );
  }

  showBlockDragMarker(pos, node) {
    const editor = this.props.editor;

    editor.props.blockEditor.showBlockDragMarker(pos, node);
  }

  hideBlockDragMarker() {
    const editor = this.props.editor;

    editor.props.blockEditor.hideBlockDragMarker();
  }

  render() {
    const isEditing = this.state.isEditing;
    var _props4 = this.props;
    const attributes = _props4.attributes,
          node = _props4.node,
          editor = _props4.editor;

    const isFocused = editor.props.blockEditor.props.value.selection.hasFocusIn(node);

    let className;
    if (isFocused && !this.state.isSelected) {
      className = _FormBuilderBlock2.default.focused;
    } else if (this.state.isSelected) {
      className = _FormBuilderBlock2.default.selected;
    } else {
      className = _FormBuilderBlock2.default.root;
    }

    const value = this.getValue();
    const memberType = this.getMemberTypeOf(value);

    return _react2.default.createElement(
      'div',
      _extends({}, attributes, {
        onDragStart: this.handleDragStart,
        onDragEnd: this.handleDragEnd,
        onDragEnter: this.handleCancelEvent,
        onDragLeave: this.handleCancelEvent,
        onDrop: this.handleCancelEvent,
        draggable: true,
        ref: this.refFormBuilderBlock,
        className: className
      }),
      _react2.default.createElement(
        'span',
        {
          ref: this.refPreview,
          className: _FormBuilderBlock2.default.previewContainer,
          onClick: this.handleToggleEdit
        },
        _react2.default.createElement(
          'div',
          { className: _FormBuilderBlock2.default.preview },
          this.renderPreview()
        ),
        _react2.default.createElement(
          'div',
          { className: _FormBuilderBlock2.default.functions },
          memberType && _react2.default.createElement(
            'span',
            { className: _FormBuilderBlock2.default.type },
            memberType.title || memberType.name
          ),
          _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement(_default4.default, { kind: 'simple', icon: _editIcon2.default, title: 'Delete' })
          )
        )
      ),
      isEditing && _react2.default.createElement(
        _StopPropagation2.default,
        null,
        this.renderInput()
      )
    );
  }
}
exports.default = FormBuilderBlock;
FormBuilderBlock.propTypes = {
  // Note: type refers to the array type, not the value type
  type: _propTypes2.default.object.isRequired,
  node: _propTypes2.default.object,
  editor: _propTypes2.default.object,
  state: _propTypes2.default.object,
  attributes: _propTypes2.default.object,
  onPatch: _propTypes2.default.func
};