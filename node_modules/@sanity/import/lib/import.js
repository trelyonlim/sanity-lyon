'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const fromStream = require('./importFromStream');
const fromFolder = require('./importFromFolder');
const fromArray = require('./importFromArray');
const validateOptions = require('./validateOptions');

const importers = {
  fromStream,
  fromFolder,
  fromArray
};

module.exports = (() => {
  var _ref = _asyncToGenerator(function* (input, opts) {
    const options = yield validateOptions(input, opts);

    if (typeof input.pipe === 'function') {
      return fromStream(input, options, importers);
    }

    if (Array.isArray(input)) {
      return fromArray(input, options, importers);
    }

    if (typeof input === 'string') {
      return fromFolder(input, options, importers);
    }

    throw new Error('Stream does not seem to be a readable stream, an array or a path to a directory');
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();