'use strict';

let importDocuments = (() => {
  var _ref = _asyncToGenerator(function* (documents, options, importers) {
    options.onProgress({ step: 'Reading/validating data file' });
    documents.some(documentHasErrors.validate);

    // Replace relative asset paths if one is defined
    // (file://./images/foo-bar.png -> file:///abs/olute/images/foo-bar.png)
    const absPathed = documents.map(function (doc) {
      return absolutifyPaths(doc, options.assetsBase);
    });

    // Assign document IDs for document that do not have one. This is necessary
    // for us to strengthen references and import assets properly.
    const ided = absPathed.map(function (doc) {
      return assignDocumentId(doc);
    });

    // User might not have applied `_key` on array elements which are objects;
    // if this is the case, generate random keys to help realtime engine
    const keyed = ided.map(function (doc) {
      return assignArrayKeys(doc);
    });

    // Sanity prefers to have a `_type` on every object. Make sure references
    // has `_type` set to `reference`.
    const docs = keyed.map(function (doc) {
      return setTypeOnReferences(doc);
    });

    // Find references that will need strengthening when import is done
    const strongRefs = docs.map(getStrongRefs).filter(Boolean);

    // Extract asset references from the documents
    const assetRefs = flatten(docs.map(getAssetRefs).filter(function (ref) {
      return ref.length;
    }));

    // Remove asset references from the documents
    const assetless = docs.map(unsetAssetRefs);

    // Make strong references weak so they can be imported in any order
    const weakened = assetless.map(weakenStrongRefs);

    // Create batches of documents to import. Try to keep batches below a certain
    // byte-size (since document may vary greatly in size depending on type etc)
    const batches = batchDocuments(weakened);

    // Trigger actual import process
    debug('Starting import of documents');
    const docsImported = yield importBatches(batches, options);

    // Documents are imported, now proceed with post-import operations
    debug('Uploading assets');
    yield uploadAssets(assetRefs, options);

    // Strengthen references
    debug('Strengthening references');
    yield strengthenReferences(strongRefs, options);

    // Return number of documents imported
    return docsImported;
  });

  return function importDocuments(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
})();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const debug = require('debug')('sanity:import:array');
const flatten = require('lodash/flatten');

var _require = require('./assetRefs');

const getAssetRefs = _require.getAssetRefs,
      unsetAssetRefs = _require.unsetAssetRefs,
      absolutifyPaths = _require.absolutifyPaths;

const assignArrayKeys = require('./assignArrayKeys');
const assignDocumentId = require('./assignDocumentId');
const uploadAssets = require('./uploadAssets');
const documentHasErrors = require('./documentHasErrors');
const batchDocuments = require('./batchDocuments');
const importBatches = require('./importBatches');

var _require2 = require('./references');

const getStrongRefs = _require2.getStrongRefs,
      weakenStrongRefs = _require2.weakenStrongRefs,
      setTypeOnReferences = _require2.setTypeOnReferences,
      strengthenReferences = _require2.strengthenReferences;


module.exports = importDocuments;