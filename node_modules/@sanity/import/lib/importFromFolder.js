'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const path = require('path');
const fse = require('fs-extra');
const globby = require('globby');
const getFileUrl = require('file-url');
const debug = require('debug')('sanity:import:folder');

module.exports = (() => {
  var _ref = _asyncToGenerator(function* (fromDir, options, importers) {
    debug('Importing from folder %s', fromDir);
    const dataFiles = yield globby('*.ndjson', { cwd: fromDir, absolute: true });
    if (dataFiles.length === 0) {
      throw new Error(`No .ndjson file found in ${fromDir}`);
    }

    if (dataFiles.length > 1) {
      throw new Error(`More than one .ndjson file found in ${fromDir} - only one is supported`);
    }

    const assetMap = yield fse.readJson(path.join(fromDir, 'assets.json')).catch(function () {
      return {};
    });

    const dataFile = dataFiles[0];
    debug('Importing from file %s', dataFile);

    const stream = fse.createReadStream(dataFile);
    const images = yield globby('images/*', { cwd: fromDir, absolute: true });
    const files = yield globby('files/*', { cwd: fromDir, absolute: true });
    const unreferencedAssets = [].concat(images.map(function (imgPath) {
      return `image#${getFileUrl(imgPath, { resolve: false })}`;
    })).concat(files.map(function (filePath) {
      return `file#${getFileUrl(filePath, { resolve: false })}`;
    }));

    debug('Queueing %d assets', unreferencedAssets.length);

    const streamOptions = _extends({}, options, { unreferencedAssets, assetsBase: fromDir, assetMap });
    const result = yield importers.fromStream(stream, streamOptions, importers);

    if (options.deleteOnComplete) {
      yield fse.remove(fromDir);
    }

    return result;
  });

  function importFromFolder(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  }

  return importFromFolder;
})();