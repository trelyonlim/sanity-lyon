'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _popoverStyle = require('part:@sanity/components/dialogs/popover-style');

var _popoverStyle2 = _interopRequireDefault(_popoverStyle);

var _default = require('part:@sanity/components/buttons/default');

var _default2 = _interopRequireDefault(_default);

var _closeIcon = require('part:@sanity/base/close-icon');

var _closeIcon2 = _interopRequireDefault(_closeIcon);

var _Portal = require('../utilities/Portal');

var _Stacked = require('../utilities/Stacked');

var _Stacked2 = _interopRequireDefault(_Stacked);

var _CaptureOutsideClicks = require('../utilities/CaptureOutsideClicks');

var _CaptureOutsideClicks2 = _interopRequireDefault(_CaptureOutsideClicks);

var _Escapable = require('../utilities/Escapable');

var _Escapable2 = _interopRequireDefault(_Escapable);

var _reactPopper = require('@bjoerge/react-popper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class EditItemPopOver extends _react2.default.PureComponent {

  renderPopper(isActive) {
    var _props = this.props;
    const title = _props.title,
          color = _props.color,
          children = _props.children,
          actions = _props.actions,
          onClose = _props.onClose,
          onClickOutside = _props.onClickOutside,
          _onEscape = _props.onEscape,
          modifiers = _props.modifiers;

    return _react2.default.createElement(
      _reactPopper.Popper,
      {
        className: `${_popoverStyle2.default.popper} ${_popoverStyle2.default[`color_${color}`]}`,
        placement: 'auto',
        modifiers: modifiers
      },
      _react2.default.createElement(_reactPopper.Arrow, { className: title ? _popoverStyle2.default.filledArrow : _popoverStyle2.default.arrow }),
      _react2.default.createElement(_Escapable2.default, { onEscape: event => (isActive || event.shiftKey) && _onEscape && _onEscape() }),
      _react2.default.createElement(
        _CaptureOutsideClicks2.default,
        { onClickOutside: isActive ? onClickOutside : undefined },
        _react2.default.createElement(
          'div',
          { className: _popoverStyle2.default.popover },
          onClose && _react2.default.createElement(
            'button',
            {
              className: title ? _popoverStyle2.default.closeInverted : _popoverStyle2.default.close,
              type: 'button',
              onClick: onClose
            },
            _react2.default.createElement(_closeIcon2.default, null)
          ),
          title && _react2.default.createElement(
            'h3',
            { className: _popoverStyle2.default.title },
            title
          ),
          _react2.default.createElement(
            'div',
            { className: actions.length > 0 ? _popoverStyle2.default.contentWithActions : _popoverStyle2.default.content },
            children
          ),
          actions.length > 0 && _react2.default.createElement(
            'div',
            { className: _popoverStyle2.default.footer },
            _react2.default.createElement(
              'div',
              { className: _popoverStyle2.default.actions },
              actions.map((action, i) => {
                return _react2.default.createElement(
                  _default2.default,
                  {
                    key: i,
                    onClick: () => this.props.onAction(action),
                    'data-action-index': i,
                    color: action.color,
                    disabled: action.disabled,
                    kind: action.kind,
                    autoFocus: action.autoFocus,
                    className: action.secondary ? _popoverStyle2.default.actionSecondary : ''
                  },
                  action.title
                );
              })
            )
          )
        )
      )
    );
  }

  render() {
    return _react2.default.createElement(
      _reactPopper.Manager,
      null,
      _react2.default.createElement(_reactPopper.Target, { className: _popoverStyle2.default.target }),
      _react2.default.createElement(
        _Portal.Portal,
        null,
        _react2.default.createElement(
          _Stacked2.default,
          null,
          isActive => _react2.default.createElement(
            'div',
            null,
            _react2.default.createElement('div', { className: _popoverStyle2.default.overlay }),
            this.renderPopper(isActive)
          )
        )
      )
    );
  }
}
exports.default = EditItemPopOver;
EditItemPopOver.propTypes = {
  title: _propTypes2.default.string,
  children: _propTypes2.default.node.isRequired,
  onClose: _propTypes2.default.func,
  onClickOutside: _propTypes2.default.func,
  onEscape: _propTypes2.default.func,
  onAction: _propTypes2.default.func,
  modifiers: _propTypes2.default.object,
  color: _propTypes2.default.oneOf(['default', 'danger']),
  actions: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    kind: _propTypes2.default.string,
    title: _propTypes2.default.string,
    key: _propTypes2.default.string
  }))
};
EditItemPopOver.defaultProps = {
  title: undefined,
  onAction() {},
  actions: [],
  color: 'default',
  modifiers: {
    flip: {
      boundariesElement: 'viewport'
    },
    preventOverflow: {
      boundariesElement: 'viewport'
    }
  }
};