'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SpanType = undefined;

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _utils = require('../utils');

var _createPreviewGetter = require('../../preview/createPreviewGetter');

var _createPreviewGetter2 = _interopRequireDefault(_createPreviewGetter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

const INHERITED_FIELDS = ['type', 'name', 'title', 'jsonType', 'description', 'options', 'fieldsets'];

const SPAN_CORE = {
  name: 'span',
  type: null,
  jsonType: 'object'
};

const DEFAULT_OPTIONS = {};

const SpanType = {
  get() {
    return SPAN_CORE;
  },
  extend(subTypeDef, extendMember) {
    const options = _extends({}, subTypeDef.options || DEFAULT_OPTIONS);

    var _subTypeDef$fields = subTypeDef.fields;
    const fields = _subTypeDef$fields === undefined ? [] : _subTypeDef$fields;
    var _subTypeDef$annotatio = subTypeDef.annotations;
    const annotations = _subTypeDef$annotatio === undefined ? [] : _subTypeDef$annotatio;
    var _subTypeDef$marks = subTypeDef.marks;
    const marks = _subTypeDef$marks === undefined ? [] : _subTypeDef$marks;


    const parsed = Object.assign((0, _pick3.default)(SPAN_CORE, INHERITED_FIELDS), subTypeDef, {
      type: SPAN_CORE,
      options: options
    });

    (0, _utils.lazyGetter)(parsed, 'fields', () => {
      return fields.map(fieldDef => {
        const name = fieldDef.name,
              type = _objectWithoutProperties(fieldDef, ['name']);

        return {
          name: name,
          type: extendMember(type)
        };
      });
    });

    (0, _utils.lazyGetter)(parsed, 'annotations', () => annotations.map(extendMember));
    (0, _utils.lazyGetter)(parsed, 'marks', () => marks.map(extendMember));

    (0, _utils.lazyGetter)(parsed, 'preview', (0, _createPreviewGetter2.default)(subTypeDef));

    return subtype(parsed);

    function subtype(parent) {
      return {
        get() {
          return parent;
        },
        extend: extensionDef => {
          if (extensionDef.fields) {
            throw new Error('Cannot override `fields` of subtypes of "span"');
          }
          const current = Object.assign({}, parent, (0, _pick3.default)(extensionDef, INHERITED_FIELDS), {
            type: parent
          });
          return subtype(current);
        }
      };
    }
  }
};
exports.SpanType = SpanType;