'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BlockType = undefined;

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _utils = require('../utils');

var _createPreviewGetter = require('../../preview/createPreviewGetter');

var _createPreviewGetter2 = _interopRequireDefault(_createPreviewGetter);

var _defaults = require('./defaults');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

const INHERITED_FIELDS = ['type', 'name', 'title', 'jsonType', 'description', 'options', 'fieldsets'];

const BLOCK_CORE = {
  name: 'block',
  type: null,
  jsonType: 'object'
};

const DEFAULT_OPTIONS = {};

const BlockType = {
  get() {
    return BLOCK_CORE;
  },
  extend(subTypeDef, extendMember) {
    const options = _extends({}, subTypeDef.options || DEFAULT_OPTIONS);

    const marks = subTypeDef.marks,
          styles = subTypeDef.styles,
          lists = subTypeDef.lists,
          rest = _objectWithoutProperties(subTypeDef, ['marks', 'styles', 'lists']);

    const spansField = createSpansField(marks);
    const stylesField = createStylesField(styles);
    const listsField = createListsField(lists);

    const fields = [spansField, stylesField, listsField].concat(subTypeDef.fields || []);

    const parsed = Object.assign((0, _pick3.default)(BLOCK_CORE, INHERITED_FIELDS), rest, {
      type: BLOCK_CORE,
      options: options
    });

    (0, _utils.lazyGetter)(parsed, 'fields', () => {
      return fields.map(fieldDef => {
        const name = fieldDef.name,
              type = _objectWithoutProperties(fieldDef, ['name']);

        return {
          name: name,
          type: extendMember(type)
        };
      });
    });

    (0, _utils.lazyGetter)(parsed, 'preview', (0, _createPreviewGetter2.default)(subTypeDef));

    return subtype(parsed);

    function subtype(parent) {
      return {
        get() {
          return parent;
        },
        extend: extensionDef => {
          if (extensionDef.fields) {
            throw new Error('Cannot override `fields` of subtypes of "block"');
          }
          const current = Object.assign({}, parent, (0, _pick3.default)(extensionDef, INHERITED_FIELDS), {
            type: parent
          });
          return subtype(current);
        }
      };
    }
  }
};

exports.BlockType = BlockType;
function ensureNormalStyle(styles) {
  return styles.some(style => style.value === 'normal') ? styles : [_defaults.BLOCK_STYLES.normal, ...styles];
}

function createStylesField(styles) {
  return {
    name: 'style',
    title: 'Style',
    type: 'string',
    options: {
      list: ensureNormalStyle(styles || _defaults.DEFAULT_BLOCK_STYLES)
    }
  };
}

function createDecoratorField(decorators) {
  return {
    name: 'decorators',
    type: 'array',
    title: 'Decorators',
    of: [{ type: 'string' }],
    options: {
      direction: 'vertical',
      list: decorators || _defaults.DEFAULT_DECORATORS
    }
  };
}

function createListsField(lists) {
  return {
    name: 'list',
    title: 'List type',
    type: 'string',
    options: {
      list: lists || _defaults.DEFAULT_LIST_TYPES
    }
  };
}

const DEFAULT_ANNOTATIONS = [_defaults.DEFAULT_LINK_ANNOTATION];

function createSpansField(marks) {
  return {
    name: 'spans',
    title: 'Content',
    type: 'array',
    of: [{
      type: 'span',
      fields: [_defaults.DEFAULT_TEXT_FIELD, _defaults.DEFAULT_MARKS_FIELD],
      annotations: marks && marks.annotations ? marks.annotations : DEFAULT_ANNOTATIONS,
      decorators: marks && marks.decorators ? marks.decorators : _defaults.DEFAULT_DECORATORS
    }]
  };
}