'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = resolveRefType;

var _client = require('part:@sanity/base/client');

var _client2 = _interopRequireDefault(_client);

var _observable = require('@sanity/observable');

var _observable2 = _interopRequireDefault(_observable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*:: import type {Reference, Type} from './types'*/


const CACHE = {}; // todo: use a LRU cache instead (e.g. hashlru or quick-lru)

function resolveRefTypeName(reference /*: Reference*/) {
  if (!(reference._ref in CACHE)) {
    CACHE[reference._ref] = _client2.default.fetch('*[_id == $id][0]._type', { id: reference._ref });
  }
  return _observable2.default.from(CACHE[reference._ref]);
}

function resolveRefType(value /*: Reference*/, type /*: Type*/) {
  return resolveRefTypeName(value).map(refTypeName => type.to.find(toType => toType.name === refTypeName));
}