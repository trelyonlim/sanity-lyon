'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _assetUrlBuilder = require('part:@sanity/base/asset-url-builder');

var _assetUrlBuilder2 = _interopRequireDefault(_assetUrlBuilder);

var _imageUrl = require('@sanity/image-url');

var _imageUrl2 = _interopRequireDefault(_imageUrl);

var _card = require('part:@sanity/components/previews/card');

var _card2 = _interopRequireDefault(_card);

var _default = require('part:@sanity/components/previews/default');

var _default2 = _interopRequireDefault(_default);

var _detail = require('part:@sanity/components/previews/detail');

var _detail2 = _interopRequireDefault(_detail);

var _inline = require('part:@sanity/components/previews/inline');

var _inline2 = _interopRequireDefault(_inline);

var _media = require('part:@sanity/components/previews/media');

var _media2 = _interopRequireDefault(_media);

var _block = require('part:@sanity/components/previews/block');

var _block2 = _interopRequireDefault(_block);

var _blockImage = require('part:@sanity/components/previews/block-image');

var _blockImage2 = _interopRequireDefault(_blockImage);

var _client = require('part:@sanity/base/client');

var _client2 = _interopRequireDefault(_client);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

const imageBuilder = (0, _imageUrl2.default)(_client2.default);

const previewComponentMap = {
  default: _default2.default,
  card: _card2.default,
  media: _media2.default,
  detail: _detail2.default,
  inline: _inline2.default,
  block: _block2.default
};

function extractUploadState(value) {
  if (!value || typeof value !== 'object') {
    return { _upload: null, value };
  }

  const _upload = value._upload,
        rest = _objectWithoutProperties(value, ['_upload']);

  return { _upload, value: rest };
}

class SanityDefaultPreview extends _react2.default.PureComponent {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.renderMedia = options => {
      // This functions exists because the previews provides options
      // for the rendering of the media (dimensions)
      const dimensions = options.dimensions;
      const value = this.props.value;
      const media = value.media;

      // Handle sanity image

      return _react2.default.createElement('img', {
        alt: value.title,
        src: imageBuilder.image(media).width(dimensions.width || 100).height(dimensions.height || 100).fit(dimensions.fit).url()
      });
    }, this.renderImageUrl = options => {
      // Legacy support for imageUrl
      const dimensions = options.dimensions;
      const value = this.props.value;

      const imageUrl = value.imageUrl;
      if (imageUrl) {
        const assetUrl = (0, _assetUrlBuilder2.default)(imageUrl.split('?')[0], dimensions);
        return _react2.default.createElement('img', { src: assetUrl, alt: value.title });
      }
      return undefined;
    }, this.renderIcon = options => {
      const type = this.props.type;

      const Icon = type.icon;
      return Icon && _react2.default.createElement(Icon, null);
    }, this.resolveMedia = () => {
      const value = this.props.value;
      const media = value.media;


      if (typeof media === 'function' || _react2.default.isValidElement(media)) {
        return media;
      }

      // Legacy support for imageUrl
      if (value.imageUrl) {
        return this.renderImageUrl;
      }

      // Handle sanity image
      if (media && media.asset) {
        return this.renderMedia;
      }

      // Render fallback icon
      return this.renderIcon;
    }, _temp;
  }

  render() {
    var _props = this.props;

    const layout = _props.layout,
          rest = _objectWithoutProperties(_props, ['layout']);

    let PreviewComponent = previewComponentMap.hasOwnProperty(layout) ? previewComponentMap[layout] : previewComponentMap.default;

    // TODO: Bjoerge: Check for image type with "is()"
    if (layout === 'block' && this.props.type && this.props.type.name === 'image') {
      PreviewComponent = _blockImage2.default;
    }

    var _extractUploadState = extractUploadState(this.props.value);

    const _upload = _extractUploadState._upload,
          value = _extractUploadState.value;


    const item = _upload ? _extends({}, value, {
      imageUrl: _upload.previewImage,
      title: value.title || _upload.file && _upload.file.name || 'Uploadingâ€¦'
    }) : value;

    if (!item) {
      return _react2.default.createElement(PreviewComponent, _extends({}, rest, { progress: _upload && _upload.progress }));
    }

    const media = this.resolveMedia();

    return _react2.default.createElement(PreviewComponent, _extends({}, rest, {
      title: item.title,
      subtitle: item.subtitle,
      description: item.description,
      media: media,
      progress: _upload && _upload.progress
    }));
  }
}
exports.default = SanityDefaultPreview;
SanityDefaultPreview.propTypes = {
  layout: _propTypes2.default.oneOf(Object.keys(previewComponentMap)),
  value: _propTypes2.default.object,
  type: _propTypes2.default.shape({
    title: _propTypes2.default.string
  }).isRequired
};