'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = RenderPreviewSnapshot;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _previewResolver = require('part:@sanity/base/preview-resolver?');

var _previewResolver2 = _interopRequireDefault(_previewResolver);

var _SanityDefaultPreview = require('./SanityDefaultPreview');

var _SanityDefaultPreview2 = _interopRequireDefault(_SanityDefaultPreview);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

// Set this to true for debugging preview subscriptions
const DEBUG = false;

function resolvePreview(type) {
  const fromPreview = (0, _get3.default)(type, 'preview.component');
  if (fromPreview) {
    return fromPreview;
  }
  const custom = _previewResolver2.default && (0, _previewResolver2.default)(type);
  return custom || _SanityDefaultPreview2.default;
}

function RenderPreviewSnapshot(props) {
  const snapshot = props.snapshot,
        type = props.type,
        isLive = props.isLive,
        layout = props.layout,
        rest = _objectWithoutProperties(props, ['snapshot', 'type', 'isLive', 'layout']);

  const PreviewComponent = resolvePreview(type);
  const preview = _react2.default.createElement(PreviewComponent
  // Render media always until we have schema functionality for determing if there is media
  , _extends({ media: () => undefined
  }, rest, {
    value: snapshot,
    type: type,
    layout: layout,
    isPlaceholder: !snapshot
  }));
  if (DEBUG) {
    return _react2.default.createElement(
      'div',
      null,
      _react2.default.createElement(
        'span',
        { style: { position: 'absolute', right: 24, top: 2 } },
        isLive ? '‚ö°Ô∏è' : 'üí§'
      ),
      preview
    );
  }

  return preview;
}

RenderPreviewSnapshot.propTypes = {
  snapshot: _propTypes2.default.object,
  type: _propTypes2.default.object,
  isLive: _propTypes2.default.bool,
  layout: _propTypes2.default.string
};