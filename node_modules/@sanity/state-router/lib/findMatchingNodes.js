'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

var _intersection2 = require('lodash/intersection');

var _intersection3 = _interopRequireDefault(_intersection2);

var _difference2 = require('lodash/difference');

var _difference3 = _interopRequireDefault(_difference2);

exports.default = findMatchingRoutes;

var _arrayify = require('./utils/arrayify');

var _arrayify2 = _interopRequireDefault(_arrayify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*:: import type {Node, MatchResult} from './types'*/


function createMatchResult(nodes /*: Node[]*/, missing /*: string[]*/, remaining /*: string[]*/) /*: MatchResult*/ {
  return { nodes, missing, remaining };
}

function findMatchingRoutes(node /*: Node*/, _state /*: ?Object*/) /*: MatchResult*/ {
  if (_state === null || _state === undefined) {
    return createMatchResult([], [], []);
  }

  const state = node.scope ? _state[node.scope] : _state;

  const requiredParams = node.route.segments.filter(seg => seg.type === 'param').map(seg => seg.name);

  const stateKeys = state ? Object.keys(state) : [];

  const consumedParams = (0, _intersection3.default)(stateKeys, requiredParams);
  const missingParams = (0, _difference3.default)(requiredParams, consumedParams);
  const remainingParams = (0, _difference3.default)(stateKeys, consumedParams);

  if (missingParams.length > 0) {
    return createMatchResult([], missingParams, []);
  }

  if (remainingParams.length === 0) {
    return createMatchResult([node], [], []);
  }

  const children = (typeof node.children === 'function' ? node.children(state) : node.children) || [];

  if (remainingParams.length > 0 && children.length === 0) {
    return createMatchResult([], remainingParams, []);
  }

  const remainingState = (0, _pick3.default)(state, remainingParams);

  let matchingChild /*: MatchResult*/ = { nodes: [], remaining: [], missing: [] };

  (0, _arrayify2.default)(children).some(childNode => {
    matchingChild = findMatchingRoutes(childNode, remainingState);
    return matchingChild.nodes.length > 0;
  });

  if (matchingChild.nodes.length === 0) {
    return createMatchResult([], missingParams, remainingParams);
  }

  return createMatchResult([node, ...matchingChild.nodes], matchingChild.missing, matchingChild.remaining);
}