'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = resolveStateFromPath;

var _debug = require('./utils/debug');

var _arrayify = require('./utils/arrayify');

var _arrayify2 = _interopRequireDefault(_arrayify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*:: import type {Node} from './types'*/


function matchPath(node /*: Node*/, path /*: string*/) /*: ?{[key: string]: string}*/ {
  const parts = path.split('/').filter(Boolean);
  const segmentsLength = node.route.segments.length;
  if (parts.length < segmentsLength) {
    return null;
  }

  const state = {};
  const isMatching = node.route.segments.every((segment, i) => {
    if (segment.type === 'dir') {
      return segment.name === parts[i];
    }
    const transform = node.transform && node.transform[segment.name];
    state[segment.name] = transform ? transform.toState(parts[i]) : parts[i];
    return true;
  });

  if (!isMatching) {
    return null;
  }

  const rest = parts.slice(segmentsLength);
  let childState = null;
  const children = typeof node.children === 'function' ? (0, _arrayify2.default)(node.children(state)) : node.children;
  children.some(childNode => {
    // console.log('----childNode')
    // console.log(childNode)
    // console.log('----childNode')
    childState = matchPath(childNode, rest.join('/'));
    return childState;
  });

  if (rest.length > 0 && !childState) {
    return null;
  }

  const mergedState = _extends({}, state, childState);
  return node.scope ? { [node.scope]: mergedState } : mergedState;
}

function resolveStateFromPath(node /*: Node*/, path /*: string*/) /*: ?Object*/ {
  (0, _debug.debug)('resolving state from path %s', path);

  const pathMatch = matchPath(node, path.split('?')[0]);

  (0, _debug.debug)('resolved: %o', pathMatch || null);
  return pathMatch || null;
}