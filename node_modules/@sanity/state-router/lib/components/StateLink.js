'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Link = require('./Link');

var _Link2 = _interopRequireDefault(_Link);

var _internalRouterContextTypeCheck = require('./internalRouterContextTypeCheck');

var _internalRouterContextTypeCheck2 = _interopRequireDefault(_internalRouterContextTypeCheck);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/*:: import type {RouterProviderContext} from './types'*/


const EMPTY_STATE = {};

class StateLink extends _react2.default.PureComponent /*:: <*, *>*/ {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.setElement = (element /*: ?Link*/) => {
      if (element) {
        this._element = element;
      }
    }, _temp;
  }

  resolveUrl() /*: string*/ {
    var _props = this.props;
    const toIndex = _props.toIndex,
          state = _props.state;


    if (state && toIndex) {
      throw new Error('Passing both `state` and `toIndex` as props to StateLink is invalid');
    }

    if (!state && !toIndex) {
      // eslint-disable-next-line no-console
      console.error(new Error('No state passed to StateLink. If you want to link to an empty state, its better to use the the `toIndex` property'));
    }

    const nextState = toIndex ? EMPTY_STATE : state || EMPTY_STATE;

    return this.resolvePathFromState(nextState);
  }

  resolvePathFromState(state /*: Object*/) {
    if (!this.context.__internalRouter) {
      return `javascript://state@${JSON.stringify(state)}`;
    }
    return this.context.__internalRouter.resolvePathFromState(state);
  }

  focus() {
    if (this._element) {
      this._element.focus();
    }
  }

  render() {
    var _props2 = this.props;

    const state = _props2.state,
          toIndex = _props2.toIndex,
          rest = _objectWithoutProperties(_props2, ['state', 'toIndex']);

    return _react2.default.createElement(_Link2.default, _extends({}, rest, { href: this.resolveUrl(), ref: this.setElement }));
  }
}
exports.default = StateLink;
StateLink.defaultProps = {
  replace: false,
  toIndex: false
};
StateLink.contextTypes = {
  __internalRouter: _internalRouterContextTypeCheck2.default
};