'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Link = require('./Link');

var _Link2 = _interopRequireDefault(_Link);

var _internalRouterContextTypeCheck = require('./internalRouterContextTypeCheck');

var _internalRouterContextTypeCheck2 = _interopRequireDefault(_internalRouterContextTypeCheck);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/*:: import type {Node} from 'react'*/
/*:: import type {RouterProviderContext} from './types'*/
class IntentLink extends _react2.default.PureComponent /*:: <*, *>*/ {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.setElement = (element /*: ?Link*/) => {
      if (element) {
        this._element = element;
      }
    }, _temp;
  }

  focus() {
    if (this._element) {
      this._element.focus();
    }
  }

  resolveIntentLink(intent /*: string*/, params /*: Object*/) {
    if (!this.context.__internalRouter) {
      return `javascript://intent@${JSON.stringify({ intent, params })}`;
    }
    return this.context.__internalRouter.resolveIntentLink(intent, params);
  }

  render() {
    var _props = this.props;

    const intent = _props.intent,
          params = _props.params,
          rest = _objectWithoutProperties(_props, ['intent', 'params']);

    return _react2.default.createElement(_Link2.default, _extends({ href: this.resolveIntentLink(intent, params) }, rest, { ref: this.setElement }));
  }
}
exports.default = IntentLink;
IntentLink.contextTypes = {
  __internalRouter: _internalRouterContextTypeCheck2.default
};