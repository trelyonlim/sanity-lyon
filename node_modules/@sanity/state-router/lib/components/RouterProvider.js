'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _nanoPubsub = require('nano-pubsub');

var _nanoPubsub2 = _interopRequireDefault(_nanoPubsub);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*:: import type {Node} from 'react'*/
/*:: import type {Router} from '../types'*/
/*:: import type {RouterProviderContext, NavigateOptions, InternalRouter, RouterState} from './types'*/
/*:: type Props = {
  onNavigate: (nextPath: string, options?: NavigateOptions) => void,
  router: Router,
  state: RouterState,
  children: Node
}*/
class RouterProvider extends _react2.default.Component /*:: <*, *>*/ {

  constructor(props /*: Props*/) {
    super();

    this.navigateUrl = (url /*: string*/, options /*: NavigateOptions*/ = {}) /*: void*/ => {
      const onNavigate = this.props.onNavigate;

      onNavigate(url, options);
    };

    this.navigateState = (nextState /*: Object*/, options /*: NavigateOptions*/ = {}) /*: void*/ => {
      this.navigateUrl(this.resolvePathFromState(nextState), options);
    };

    this.navigateIntent = (intentName /*: string*/, params /*: Object*/, options /*: NavigateOptions*/ = {}) /*: void*/ => {
      this.navigateUrl(this.resolveIntentLink(intentName, params), options);
    };

    this.getState = () => this._state;

    this.resolvePathFromState = (state /*: Object*/) /*: string*/ => {
      return this.props.router.encode(state);
    };

    this.resolveIntentLink = (intentName /*: string*/, params /*: Object*/) /*: string*/ => {
      return this.props.router.encode({ intent: intentName, params });
    };

    this._state = props.state;
    this.__internalRouter = {
      resolvePathFromState: this.resolvePathFromState,
      resolveIntentLink: this.resolveIntentLink,
      navigateUrl: this.navigateUrl,
      navigate: this.navigateState,
      navigateIntent: this.navigateIntent,
      getState: this.getState,
      channel: (0, _nanoPubsub2.default)()
    };
  }

  getChildContext() /*: RouterProviderContext*/ {
    return {
      __internalRouter: this.__internalRouter
    };
  }

  componentWillReceiveProps(nextProps /*: Props*/) {
    if (this.props.state !== nextProps.state) {
      this._state = nextProps.state;
      this.__internalRouter.channel.publish(nextProps.state);
    }
  }

  render() {
    return this.props.children;
  }
}
exports.default = RouterProvider;
RouterProvider.childContextTypes = {
  __internalRouter: _propTypes2.default.object
};