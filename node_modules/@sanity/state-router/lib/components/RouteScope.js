'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _isEmpty = require('../utils/isEmpty');

var _isEmpty2 = _interopRequireDefault(_isEmpty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*:: import type {Node} from 'react'*/
/*:: import type {RouterProviderContext, NavigateOptions, InternalRouter} from './types'*/


function addScope(routerState /*: Object*/, scope /*: string*/, scopedState /*: Object*/) {
  return scopedState && _extends({}, routerState, {
    [scope]: scopedState
  });
}

/*:: type Props = {
  scope: string,
  children: Node
}*/
class RouteScope extends _react2.default.Component /*:: <*, *>*/ {

  constructor(props /*: Props*/, context /*: RouterProviderContext*/) {
    super();

    _initialiseProps.call(this);

    const parentInternalRouter = context.__internalRouter;

    this.__internalRouter = _extends({}, parentInternalRouter, {
      resolvePathFromState: this.resolvePathFromState,
      navigate: this.navigate,
      getState: this.getScopedState
    });
  }

  getChildContext() /*: RouterProviderContext*/ {
    return {
      __internalRouter: this.__internalRouter
    };
  }

  render() {
    return this.props.children;
  }
}
exports.default = RouteScope;
RouteScope.childContextTypes = RouteScope.contextTypes = {
  __internalRouter: _propTypes2.default.object
};

var _initialiseProps = function _initialiseProps() {
  this.getScopedState = () => {
    const scope = this.props.scope;

    const parentInternalRouter = this.context.__internalRouter;
    return parentInternalRouter.getState()[scope];
  };

  this.resolvePathFromState = (nextState /*: Object*/) /*: string*/ => {
    const parentInternalRouter = this.context.__internalRouter;
    const scope = this.props.scope;

    const nextStateScoped /*: Object*/ = (0, _isEmpty2.default)(nextState) ? {} : addScope(parentInternalRouter.getState(), scope, nextState);

    return parentInternalRouter.resolvePathFromState(nextStateScoped);
  };

  this.navigate = (nextState /*: Object*/, options /*: NavigateOptions*/) /*: void*/ => {
    const parentInternalRouter = this.context.__internalRouter;
    const nextScopedState = addScope(parentInternalRouter.getState(), this.props.scope, nextState);
    parentInternalRouter.navigate(nextScopedState, options);
  };
};