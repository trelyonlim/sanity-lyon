'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _internalRouterContextTypeCheck = require('./internalRouterContextTypeCheck');

var _internalRouterContextTypeCheck2 = _interopRequireDefault(_internalRouterContextTypeCheck);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*:: import type {RouterProviderContext} from './types'*/


function isLeftClickEvent(event /*: SyntheticMouseEvent<*>*/) {
  return event.button === 0;
}

function isModifiedEvent(event /*: SyntheticMouseEvent<*>*/) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}

class Link extends _react2.default.PureComponent /*:: <*, *>*/ {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.handleClick = (event /*: SyntheticMouseEvent<*>*/) /*: void*/ => {
      if (!this.context.__internalRouter) {
        return;
      }

      if (event.isDefaultPrevented()) {
        return;
      }

      var _props = this.props;
      const onClick = _props.onClick,
            href = _props.href,
            target = _props.target,
            replace = _props.replace;


      if (onClick) {
        onClick(event);
      }

      if (isModifiedEvent(event) || !isLeftClickEvent(event)) {
        return;
      }

      // If target prop is set (e.g. to "_blank") let browser handle link.
      if (target) {
        return;
      }

      event.preventDefault();

      this.context.__internalRouter.navigateUrl(href, { replace });
    }, this.setElement = (element /*: ?HTMLAnchorElement*/) => {
      if (element) {
        this._element = element;
      }
    }, _temp;
  }

  focus() {
    if (this._element) {
      this._element.focus();
    }
  }

  render() {
    return _react2.default.createElement('a', _extends({}, (0, _omit3.default)(this.props, 'replace'), { onClick: this.handleClick, ref: this.setElement }));
  }
}
exports.default = Link;
Link.defaultProps = {
  replace: false
};
Link.contextTypes = {
  __internalRouter: _internalRouterContextTypeCheck2.default
};