'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = withRouter;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _internalRouterContextTypeCheck = require('./internalRouterContextTypeCheck');

var _internalRouterContextTypeCheck2 = _interopRequireDefault(_internalRouterContextTypeCheck);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*:: import type {Router, InternalRouter} from './types'*/
/*:: import type {ComponentType} from 'react'*/
/*:: type State = {
  routerState: Object
}*/


const NO_CONTEXT_STATE = {
  state: {},
  navigate: state => {
    throw new Error(`Cannot navigate to the state ${JSON.stringify(state)}. No router found in context`);
  },
  navigateIntent: intentName => {
    throw new Error(`Cannot navigate to the intent ${intentName}. No router found in context`);
  }
};

function withRouter /*:: <Props: {}>*/(Component /*: ComponentType<{router: Router} & Props>*/) /*: ComponentType<Props>*/ {
  var _class, _temp, _initialiseProps;

  return _temp = _class = class extends _react2.default.Component /*:: <*, *>*/ {

    constructor(props, context) {
      super();

      _initialiseProps.call(this);

      const __internalRouter = context.__internalRouter;
      if (__internalRouter) {
        this.state = { routerState: __internalRouter.getState() };
      }
    }

    componentWillMount() {
      const __internalRouter = this.context.__internalRouter;
      if (!__internalRouter) {
        return;
      }
      this.unsubscribe = __internalRouter.channel.subscribe(() => {
        this.setState({ routerState: __internalRouter.getState() });
      });
    }

    componentWillUnmount() {
      this.unsubscribe();
    }

    render() {
      const internalRouter = this.context.__internalRouter;

      const router /*: Router*/ = internalRouter ? {
        state: this.state.routerState,
        navigate: internalRouter.navigate,
        navigateIntent: internalRouter.navigateIntent
      } : NO_CONTEXT_STATE;

      return _react2.default.createElement(Component, _extends({}, this.props, { router: router }));
    }
  }, _class.displayName = `withRouter(${Component.displayName || Component.name})`, _class.contextTypes = {
    __internalRouter: _internalRouterContextTypeCheck2.default
  }, _initialiseProps = function _initialiseProps() {
    this.state = {
      routerState: {}
    };
  }, _temp;
}