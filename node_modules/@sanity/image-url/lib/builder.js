'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = urlBuilder;

var _urlForImage = require('./urlForImage');

var _urlForImage2 = _interopRequireDefault(_urlForImage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var validFits = ['clip', 'crop', 'fill', 'fillmax', 'max', 'scale', 'min'];
var validCrops = ['top', 'bottom', 'left', 'right', 'center', 'focalpoint', 'entropy'];

var ImageUrlBuilder = function () {
  function ImageUrlBuilder(parent, options) {
    _classCallCheck(this, ImageUrlBuilder);

    if (parent) {
      this.options = Object.assign({}, parent.options, options || {});
    } else {
      this.options = options || {};
    }
  }

  _createClass(ImageUrlBuilder, [{
    key: '_withOptions',
    value: function _withOptions(options) {
      return new ImageUrlBuilder(this, options);
    }

    // The image to be represented. Accepts a Sanity 'image'-document, 'asset'-document or
    // _id of asset. To get the benefit of automatic hot-spot/crop integration with the content
    // studio, the 'image'-document must be provided.

  }, {
    key: 'image',
    value: function image(source) {
      return this._withOptions({ source: source });
    }

    // Specify the dataset

  }, {
    key: 'dataset',
    value: function dataset(_dataset) {
      return this._withOptions({ dataset: _dataset });
    }

    // Specify the projectId

  }, {
    key: 'projectId',
    value: function projectId(_projectId) {
      return this._withOptions({ projectId: _projectId });
    }

    // Specify the width of the image in pixels

  }, {
    key: 'width',
    value: function width(_width) {
      return this._withOptions({ width: _width });
    }

    // Specify the height of the image in pixels

  }, {
    key: 'height',
    value: function height(_height) {
      return this._withOptions({ height: _height });
    }

    // Specify focal point in fraction of image dimensions. Each component 0.0-1.0

  }, {
    key: 'focalPoint',
    value: function focalPoint(x, y) {
      return this._withOptions({ focalPoint: { x: x, y: y } });
    }
  }, {
    key: 'maxWidth',
    value: function maxWidth(_maxWidth) {
      return this._withOptions({ maxWidth: _maxWidth });
    }
  }, {
    key: 'minWidth',
    value: function minWidth(_minWidth) {
      return this._withOptions({ minWidth: _minWidth });
    }
  }, {
    key: 'maxHeight',
    value: function maxHeight(_maxHeight) {
      return this._withOptions({ maxHeight: _maxHeight });
    }
  }, {
    key: 'minHeight',
    value: function minHeight(_minHeight) {
      return this._withOptions({ minHeight: _minHeight });
    }

    // Specify width and height in pixels

  }, {
    key: 'size',
    value: function size(width, height) {
      return this._withOptions({ width: width, height: height });
    }

    // Specify blur between 0 and 100

  }, {
    key: 'blur',
    value: function blur(_blur) {
      return this._withOptions({ blur: _blur });
    }
  }, {
    key: 'sharpen',
    value: function sharpen(_sharpen) {
      return this._withOptions({ sharpen: _sharpen });
    }

    // Specify the desired rectangle of the image

  }, {
    key: 'rect',
    value: function rect(left, top, width, height) {
      return this._withOptions({ rect: { left: left, top: top, width: width, height: height } });
    }

    // Specify the image format of the image. 'jpg', 'pjpg', 'png', 'webp'

  }, {
    key: 'format',
    value: function format(_format) {
      return this._withOptions({ format: _format });
    }
  }, {
    key: 'invert',
    value: function invert(_invert) {
      return this._withOptions({ invert: _invert });
    }

    // Rotation in degrees 0, 90, 180, 270

  }, {
    key: 'orientation',
    value: function orientation(_orientation) {
      return this._withOptions({ orientation: _orientation });
    }

    // Compression quality 0-100

  }, {
    key: 'quality',
    value: function quality(_quality) {
      return this._withOptions({ quality: _quality });
    }

    // Make it a download link. Parameter is default filename.

  }, {
    key: 'forceDownload',
    value: function forceDownload(download) {
      return this._withOptions({ download: download });
    }

    // Flip image horizontally

  }, {
    key: 'flipHorizontal',
    value: function flipHorizontal() {
      return this._withOptions({ flipHorizontal: true });
    }

    // Flip image verically

  }, {
    key: 'flipVertical',
    value: function flipVertical() {
      return this._withOptions({ flipVertical: true });
    }

    // Ignore crop/hotspot from image record, even when present

  }, {
    key: 'ignoreImageParams',
    value: function ignoreImageParams() {
      return this._withOptions({ ignoreImageParams: true });
    }
  }, {
    key: 'fit',
    value: function fit(value) {
      if (validFits.indexOf(value) === -1) {
        throw new Error('Invalid fit mode "' + value + '"');
      }

      return this._withOptions({ fit: value });
    }
  }, {
    key: 'crop',
    value: function crop(value) {
      if (validCrops.indexOf(value) === -1) {
        throw new Error('Invalid crop mode "' + value + '"');
      }

      return this._withOptions({ crop: value });
    }

    // Gets the url based on the submitted parameters

  }, {
    key: 'url',
    value: function url() {
      return (0, _urlForImage2.default)(this.options);
    }

    // Synonym for url()

  }, {
    key: 'toString',
    value: function toString() {
      return this.url();
    }
  }]);

  return ImageUrlBuilder;
}();

function urlBuilder(options) {
  // Did we get a SanityClient?
  if (options && _typeof(options.clientConfig) === 'object') {
    // Inherit config from client
    return new ImageUrlBuilder(null, {
      baseUrl: options.clientConfig.apiHost.replace(/^https:\/\/api\./, 'https://cdn.'),
      projectId: options.clientConfig.projectId,
      dataset: options.clientConfig.dataset
    });
  }

  // Or just accept the options as given
  return new ImageUrlBuilder(null, options);
}