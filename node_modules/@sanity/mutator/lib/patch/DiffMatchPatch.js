'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _diffMatchPatch = require('diff-match-patch');

var _diffMatchPatch2 = _interopRequireDefault(_diffMatchPatch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const dmp = new _diffMatchPatch2.default();

class DiffMatchPatch {
  constructor(id /*: string*/, path /*: string*/, dmpPatchSrc /*: string*/) {
    this.id = id;
    this.path = path;
    this.dmpPatch = dmp.patch_fromText(dmpPatchSrc);
  }
  apply(targets, accessor) {
    let result = accessor;
    targets.forEach(target => {
      if (target.isIndexReference()) {
        target.toIndicies(accessor).forEach(i => {
          const oldValue = result.getIndex(i).get();
          const nextValue = dmp.patch_apply(this.dmpPatch, oldValue)[0];
          result = result.setIndex(i, nextValue);
        });
      } else if (target.isAttributeReference()) {
        const oldValue = result.getAttribute(target.name()).get();
        const nextValue = dmp.patch_apply(this.dmpPatch, oldValue)[0];
        result = result.setAttribute(target.name(), nextValue);
      } else {
        throw new Error(`Unable to apply diffMatchPatch to target ${target.toString()}`);
      }
    });
    return result;
  }
}
exports.default = DiffMatchPatch;