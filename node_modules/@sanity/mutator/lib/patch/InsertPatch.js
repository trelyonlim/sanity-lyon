'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _max2 = require('lodash/max');

var _max3 = _interopRequireDefault(_max2);

var _min2 = require('lodash/min');

var _min3 = _interopRequireDefault(_min2);

var _util = require('./util');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class InsertPatch {
  constructor(id /*: string*/, location /*: string*/, path /*: string*/, items /*: Array<any>*/) {
    this.id = id;
    this.location = location;
    this.path = path;
    this.items = items;
  }
  apply(targets, accessor) {
    let result = accessor;
    if (accessor.containerType() !== 'array') {
      throw new Error('Attempt to apply insert patch to non-array value');
    }
    switch (this.location) {
      case 'before':
        {
          const pos = minIndex(targets, accessor);
          result = result.insertItemsAt(pos, this.items);
          break;
        }
      case 'after':
        {
          const pos = maxIndex(targets, accessor);
          result = result.insertItemsAt(pos + 1, this.items);
          break;
        }
      case 'replace':
        {
          // TODO: Properly implement ranges in compliance with Gradient
          // This will only properly support single contiguous ranges
          const indicies = (0, _util.targetsToIndicies)(targets, accessor);
          result = result.unsetIndices(indicies);
          result = result.insertItemsAt(indicies[0], this.items);
          break;
        }
      default:
        {
          throw new Error(`Unsupported location atm: ${this.location}`);
        }
    }
    return result;
  }
}

exports.default = InsertPatch;
function minIndex(targets, accessor) /*: number*/ {
  let result = (0, _min3.default)((0, _util.targetsToIndicies)(targets, accessor));
  // Ranges may be zero-length and not turn up in indices
  targets.forEach(target => {
    if (target.isRange()) {
      var _target$expandRange = target.expandRange();

      const start = _target$expandRange.start;

      if (start < result) {
        result = start;
      }
    }
  });
  return result;
}

function maxIndex(targets, accessor) /*: number*/ {
  let result = (0, _max3.default)((0, _util.targetsToIndicies)(targets, accessor));
  // Ranges may be zero-length and not turn up in indices
  targets.forEach(target => {
    if (target.isRange()) {
      var _target$expandRange2 = target.expandRange();

      const end = _target$expandRange2.end;

      if (end > result) {
        result = end;
      }
    }
  });
  return result;
}