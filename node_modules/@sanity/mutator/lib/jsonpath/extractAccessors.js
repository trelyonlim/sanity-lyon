'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _compact2 = require('lodash/compact');

var _compact3 = _interopRequireDefault(_compact2);

exports.default = extract;

var _PlainProbe = require('./PlainProbe');

var _PlainProbe2 = _interopRequireDefault(_PlainProbe);

var _jsonpath = require('../jsonpath');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function extract(path /*: string*/, value /*: Object*/) /*: Array<any>*/ {
  const result = [];
  const appendResult = values => {
    result.push(...values);
  };
  const matcher = _jsonpath.Matcher.fromPath(path).setPayload(appendResult);
  const accessor = new _PlainProbe2.default(value);
  descend(matcher, accessor);
  return result;
}

function descend(matcher, accessor) {
  var _matcher$match = matcher.match(accessor);

  const leads = _matcher$match.leads,
        delivery = _matcher$match.delivery;

  leads.forEach(lead => {
    accessorsFromTarget(lead.target, accessor).forEach(childAccessor => {
      descend(lead.matcher, childAccessor);
    });
  });
  if (delivery) {
    delivery.targets.forEach(target => {
      delivery.payload(accessorsFromTarget(target, accessor));
    });
  }
}

function accessorsFromTarget(target /*: Expression*/, accessor /*: PlainProbe*/) {
  const result = [];
  if (target.isIndexReference()) {
    target.toIndicies(accessor).forEach(i => {
      result.push(accessor.getIndex(i));
    });
  } else if (target.isAttributeReference()) {
    result.push(accessor.getAttribute(target.name()));
  } else if (target.isSelfReference()) {
    result.push(accessor);
  } else {
    throw new Error(`Unable to derive accessor for target ${target.toString()}`);
  }
  return (0, _compact3.default)(result);
}