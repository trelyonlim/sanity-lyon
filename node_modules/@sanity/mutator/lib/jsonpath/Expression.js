'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// A utility wrapper class to process parsed jsonpath expressions

var _descend = require('./descend');

var _descend2 = _interopRequireDefault(_descend);

var _toPath = require('./toPath');

var _toPath2 = _interopRequireDefault(_toPath);

var _parse = require('./parse');

var _parse2 = _interopRequireDefault(_parse);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*:: type Probe = Object*/
class Expression {
  constructor(expr /*: Object*/) {
    // This is a wrapped expr
    if (expr.expr) {
      this.expr = expr.expr;
    } else {
      this.expr = expr;
    }
    if (!this.expr.type) {
      throw new Error('Attempt to create Expression for expression with no type');
    }
  }
  isPath() /*: boolean*/ {
    return this.expr.type == 'path';
  }
  isUnion() /*: boolean*/ {
    return this.expr.type == 'union';
  }
  isCollection() /*: boolean*/ {
    return this.isPath() || this.isUnion();
  }
  isConstraint() /*: boolean*/ {
    return this.expr.type == 'constraint';
  }
  isRecursive() /*: boolean*/ {
    return this.expr.type == 'recursive';
  }
  isExistenceConstraint() /*: boolean*/ {
    return this.isConstraint() && this.expr.operator == '?';
  }
  isIndex() /*: boolean*/ {
    return this.expr.type == 'index';
  }
  isRange() /*: boolean*/ {
    return this.expr.type == 'range';
  }
  expandRange(probe /*: Probe*/) /*: Object*/ {
    let start = this.expr.start || 0;
    start = interpretNegativeIndex(start, probe);
    let end = this.expr.end || probe.length();
    end = interpretNegativeIndex(end, probe);
    const step = this.expr.step || 1;
    return { start, end, step };
  }
  isAttributeReference() /*: boolean*/ {
    return this.expr.type == 'attribute';
  }
  // Is a range or index -> something referencing indexes
  isIndexReference() /*: boolean*/ {
    return this.isIndex() || this.isRange();
  }
  name() /*: string*/ {
    return this.expr.name;
  }
  isSelfReference() /*: boolean*/ {
    return this.expr.type == 'alias' && this.expr.target == 'self';
  }
  constraintTargetIsSelf() {
    return this.isConstraint() && this.expr.lhs.type == 'alias' && this.expr.lhs.target == 'self';
  }
  constraintTargetIsAttribute() {
    return this.isConstraint() && this.expr.lhs.type == 'attribute';
  }
  testConstraint(probe /*: Probe*/) /*: boolean*/ {
    if (this.constraintTargetIsSelf()) {
      if (probe.containerType() != 'primitive') {
        return false;
      }
      if (this.isExistenceConstraint()) {
        return true;
      }
      const lhs = probe.get();
      const rhs = this.expr.rhs.value;
      return testBinaryOperator(lhs, this.expr.operator, rhs);
    }
    if (!this.constraintTargetIsAttribute()) {
      throw new Error(`Constraint target ${this.expr.lhs.type} not supported`);
    }
    if (probe.containerType() != 'object') {
      return false;
    }
    const lhs = probe.getAttribute(this.expr.lhs.name);
    if (lhs === undefined || lhs === null || lhs.containerType() != 'primitive') {
      // LHS is void and empty, or it is a collection
      return false;
    }
    if (this.isExistenceConstraint()) {
      // There is no rhs, and if we're here the key did exist
      return true;
    }
    const rhs = this.expr.rhs.value;
    return testBinaryOperator(lhs.get(), this.expr.operator, rhs);
  }
  pathNodes() {
    if (this.isPath()) {
      return this.expr.nodes;
    }
    return [this.expr];
  }
  prepend(node) {
    if (!node) {
      return this;
    }
    return new Expression({
      type: 'path',
      nodes: node.pathNodes().concat(this.pathNodes())
    });
  }
  concat(other) {
    if (!other) {
      return this;
    }
    return other.prepend(this);
  }
  descend() {
    return (0, _descend2.default)(this.expr).map(headTail => {
      var _headTail = _slicedToArray(headTail, 2);

      const head = _headTail[0],
            tail = _headTail[1];

      return {
        head: head ? new Expression(head) : null,
        tail: tail ? new Expression(tail) : null
      };
    });
  }
  unwrapRecursive() {
    if (!this.isRecursive()) {
      throw new Error(`Attempt to unwrap recursive on type ${this.expr.type}`);
    }
    return new Expression(this.expr.term);
  }
  toIndicies(probe /*: Probe*/) /*: Array<number>*/ {
    if (!this.isIndexReference()) {
      throw new Error('Node cannot be converted to indexes');
    }
    if (this.expr.type == 'index') {
      return [interpretNegativeIndex(this.expr.value, probe)];
    } else if (this.expr.type == 'range') {
      const result /*: Array<number>*/ = [];

      var _expandRange = this.expandRange(probe);

      let start = _expandRange.start,
          end = _expandRange.end,
          step = _expandRange.step;

      if (step < 0) {
        ;var _ref = [end, start];
        start = _ref[0];
        end = _ref[1];
      }
      for (let i = start; i < end; i++) {
        result.push(i);
      }
      return result;
    }
    throw new Error(`Unable to convert ${this.expr.type} to indices`);
  }
  toFieldReferences() /*: Array<any>*/ {
    if (this.isIndexReference()) {
      return this.toIndicies();
    }
    if (this.isAttributeReference()) {
      return [this.name()];
    }
    throw new Error(`Can't convert ${this.expr.type} to field references`);
  }
  toString() /*: string*/ {
    return (0, _toPath2.default)(this.expr);
  }
  static fromPath(path /*: string*/) {
    return new Expression((0, _parse2.default)(path));
  }
  static attributeReference(name /*: string*/) {
    return new Expression({
      type: 'attribute',
      name: name
    });
  }
  static indexReference(i /*: number*/) {
    return new Expression({
      type: 'index',
      value: i
    });
  }
}

exports.default = Expression; // Tests an operator on two given primitive values

function testBinaryOperator(lhsValue, operator, rhsValue) {
  switch (operator) {
    case '>':
      return lhsValue > rhsValue;
    case '>=':
      return lhsValue >= rhsValue;
    case '<':
      return lhsValue < rhsValue;
    case '<=':
      return lhsValue <= rhsValue;
    case '==':
      return lhsValue == rhsValue;
    case '!=':
      return lhsValue != rhsValue;
    default:
      throw new Error(`Unsupported binary operator ${operator}`);
  }
}
function interpretNegativeIndex(index /*: number*/, probe /*: Probe*/) {
  if (index < 0) {
    return index + probe.length();
  }
  return index;
}