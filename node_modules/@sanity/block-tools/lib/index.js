'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _blockContentTypeToOptions = require('./util/blockContentTypeToOptions');

var _blockContentTypeToOptions2 = _interopRequireDefault(_blockContentTypeToOptions);

var _blocksToSlateState = require('./converters/blocksToSlateState');

var _blocksToSlateState2 = _interopRequireDefault(_blocksToSlateState);

var _HtmlDeserializer = require('./HtmlDeserializer');

var _HtmlDeserializer2 = _interopRequireDefault(_HtmlDeserializer);

var _slateStateToBlocks = require('./converters/slateStateToBlocks');

var _slateStateToBlocks2 = _interopRequireDefault(_slateStateToBlocks);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * BlockTools - various tools for Sanity block content
 *
 * @param {Object} blockContentType
 *    The compiled schema for the block content type to work with
 *
 */
exports.default = {
  /**
   * Convert HTML to blocks respecting the block content type's schema
   *
   * @param {String} html
   *
   * @param {Object} options
   *   @property {Object} blockContentType
   *      A compiled version of the schema type for the block content
   *   @property {Array} rules
   *      Optional rules working on the HTML (will be ruled first)
   *   @property {Function} parseHtml
   *      API compatible model as returned from DOMParser for using server side.
   * @returns {Array} Blocks
   */
  htmlToBlocks(html, options = {}) {
    const deserializer = new _HtmlDeserializer2.default(options);
    return deserializer.deserialize(html);
  },

  /**
   * Convert a serialized Slate state to blocks
   *
   * @param {Object} An object representing the structure of the Slate JSON.
   * @param {Object} blockContentType
   * @returns {Array} Blocks
   */
  slateStateToBlocks(slateJson, blockContentType) {
    return (0, _slateStateToBlocks2.default)(slateJson, blockContentType);
  },

  /**
   * Convert blocks to a serialized Slate state
   *
   * @param {Array} blocks
   * @param {Object} blockContentType
   * @returns {Object} An object representing the serialized Slate state.
   */

  blocksToSlateState(blocks, blockContentType) {
    return (0, _blocksToSlateState2.default)(blocks, blockContentType);
  },

  /**
   * Returns the feature-set of a compiled block content type.
   *
   * @param {Object} blockContentType
   * @returns {Object} The feature-set
   */
  getBlockContentFeatures(blockType) {
    return (0, _blockContentTypeToOptions2.default)(blockType);
  }
};