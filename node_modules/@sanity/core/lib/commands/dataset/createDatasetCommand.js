'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

let promptForDatasetVisibility = (() => {
  var _ref4 = _asyncToGenerator(function* (prompt, output) {
    const mode = yield prompt.single({
      type: 'list',
      message: 'Dataset visibility',
      choices: [{
        value: 'public',
        name: 'Public (world readable)'
      }, {
        value: 'private',
        name: 'Private (Authenticated user or token needed)'
      }]
    });

    if (mode === 'private') {
      output.print('Please note that while documents are private, assets (files and images) are still public\n');
    }

    return mode;
  });

  return function promptForDatasetVisibility(_x3, _x4) {
    return _ref4.apply(this, arguments);
  };
})();

var _debug = require('../../debug');

var _debug2 = _interopRequireDefault(_debug);

var _datasetNamePrompt = require('../../actions/dataset/datasetNamePrompt');

var _datasetNamePrompt2 = _interopRequireDefault(_datasetNamePrompt);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const helpText = `
Options
  --visibility <mode> Set visibility for this dataset (public/private)

Examples
  sanity dataset create
  sanity dataset create <name>
  sanity dataset create <name> --visibility private
`;

const allowedModes = ['private', 'public'];

exports.default = {
  name: 'create',
  group: 'dataset',
  signature: '[NAME]',
  helpText,
  description: 'Create a new dataset within your project',
  action: (() => {
    var _ref = _asyncToGenerator(function* (args, context) {
      const apiClient = context.apiClient,
            output = context.output,
            prompt = context.prompt;

      const flags = args.extOptions;

      var _args$argsWithoutOpti = _slicedToArray(args.argsWithoutOptions, 1);

      const dataset = _args$argsWithoutOpti[0];

      const client = apiClient();

      var _ref2 = yield Promise.all([client.datasets.list().then(function (sets) {
        return sets.map(function (ds) {
          return ds.name;
        });
      }), client.request({ uri: '/features' })]),
          _ref3 = _slicedToArray(_ref2, 2);

      const datasets = _ref3[0],
            projectFeatures = _ref3[1];


      if (flags.visibility && allowedModes.includes(flags.visibility)) {
        throw new Error(`Visibility mode "${flags.visibility}" not allowed`);
      }

      const datasetName = yield dataset || (0, _datasetNamePrompt2.default)(prompt);
      if (datasets.includes(datasetName)) {
        throw new Error(`Dataset "${datasetName}" already exists`);
      }

      const canCreatePrivate = projectFeatures.includes('privateDataset');
      (0, _debug2.default)('%s create private datasets', canCreatePrivate ? 'Can' : 'Cannot');

      const defaultAclMode = canCreatePrivate ? flags.visibility : 'public';
      const aclMode = yield defaultAclMode || promptForDatasetVisibility(prompt, output);

      try {
        yield client.datasets.create(datasetName, { aclMode });
        output.print('Dataset created successfully');
      } catch (err) {
        throw new Error(`Dataset creation failed:\n${err.message}`);
      }
    });

    return function action(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })()
};