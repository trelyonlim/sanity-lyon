'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Resize = function (_React$Component) {
  _inherits(Resize, _React$Component);

  function Resize() {
    _classCallCheck(this, Resize);

    return _possibleConstructorReturn(this, (Resize.__proto__ || Object.getPrototypeOf(Resize)).apply(this, arguments));
  }

  _createClass(Resize, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._canvas) {
        document.body.removeChild(this._canvas);
      }
    }
  }, {
    key: 'getCanvas',
    value: function getCanvas() {
      if (!this._canvas) {
        this._canvas = document.createElement('canvas');
        document.body.appendChild(this._canvas);
        this._canvas.style.display = 'none';
      }
      return this._canvas;
    }
  }, {
    key: 'resize',
    value: function resize(image, maxHeight, maxWidth) {
      var canvas = this.getCanvas();
      var ratio = image.width / image.height;
      var width = Math.min(image.width, maxWidth);
      var height = Math.min(image.height, maxHeight);

      var landscape = image.width > image.height;
      var targetWidth = landscape ? width : height * ratio;
      var targetHeight = landscape ? width / ratio : height;

      canvas.width = targetWidth;
      canvas.height = targetHeight;

      var ctx = canvas.getContext('2d');

      ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, targetWidth, targetHeight);
      return canvas;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          image = _props.image,
          maxHeight = _props.maxHeight,
          maxWidth = _props.maxWidth,
          children = _props.children;

      return children(this.resize(image, maxHeight, maxWidth));
    }
  }]);

  return Resize;
}(_react2.default.Component);

Resize.propTypes = {
  image: _propTypes2.default.instanceOf(HTMLImageElement).isRequired,
  maxWidth: _propTypes2.default.number.isRequired,
  maxHeight: _propTypes2.default.number.isRequired,
  children: _propTypes2.default.func.isRequired
};
exports.default = Resize;