'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = makeDragAware;

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var debug = (0, _debug2.default)('sanity-imagetool');
var supportsTouch = typeof window !== 'undefined' && 'ontouchstart' in window;

// Returns a component that emits `onDragStart, `onDrag` and `onDragEnd` events.
// It handles mouse/touch events the same way
// - `onDragStart` is called with the {x, y} positions relative from the dom node (e.g. where the mousedown event happened)
// - `onDrag` and `onDragEnd` are both called with the {x, y} difference from the previous position
function makeDragAware(Component) {
  var _class, _temp2;

  return _temp2 = _class = function (_React$PureComponent) {
    _inherits(DragAware, _React$PureComponent);

    function DragAware() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, DragAware);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DragAware.__proto__ || Object.getPrototypeOf(DragAware)).call.apply(_ref, [this].concat(args))), _this), _this.currentPos = null, _this.isDragging = false, _this.handleTouchMove = function (event) {
        // Disables mobile scroll by touch
        if (_this.isDragging) {
          event.preventDefault();
        }
      }, _this.handleDragStart = function (event) {
        var onDragStart = _this.props.onDragStart;


        if (_this.isDragging) {
          debug('Start cancelled, already a drag in progress');
          return;
        }

        _this.isDragging = true;
        var nextPos = getPos(event);
        debug('Drag started %o', nextPos);
        onDragStart(getPositionRelativeToRect(nextPos.x, nextPos.y, _this.domNode.getBoundingClientRect()));

        _this.currentPos = nextPos;
      }, _this.handleDrag = function (event) {
        if (!_this.isDragging) {
          return;
        }
        var onDrag = _this.props.onDrag;

        var nextPos = getPos(event);
        var diff = diffPos(nextPos, _this.currentPos);
        onDrag(diff);
        debug('moving by %o', diff);
        _this.currentPos = nextPos;
      }, _this.handleDragEnd = function (event) {
        var onDragEnd = _this.props.onDragEnd;

        if (!_this.isDragging) {
          return;
        }
        var nextPos = getPos(event);
        onDragEnd(getPositionRelativeToRect(nextPos.x, nextPos.y, _this.domNode.getBoundingClientRect()));
        _this.isDragging = false;
        _this.currentPos = null;
        debug('Done moving %o', nextPos);
      }, _this.handleDragCancel = function (event) {
        if (!_this.isDragging) {
          return;
        }
        var onDragEnd = _this.props.onDragEnd;

        _this.isDragging = false;
        onDragEnd(getPositionRelativeToRect(_this.currentPos.x, _this.currentPos.y, _this.domNode.getBoundingClientRect()));
        _this.currentPos = null;
      }, _this.setDomNode = function (node) {
        _this.domNode = node;
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(DragAware, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        if (supportsTouch) {
          document.body.addEventListener('touchmove', this.handleTouchMove, { passive: false });
          document.body.addEventListener('touchend', this.handleDragEnd);
          document.body.addEventListener('touchcancel', this.handleDragCancel);
        } else {
          document.body.addEventListener('mousemove', this.handleDrag);
          document.body.addEventListener('mouseup', this.handleDragEnd);
          document.body.addEventListener('mouseleave', this.handleDragCancel);
        }
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        if (supportsTouch) {
          document.body.removeEventListener('touchmove', this.handleTouchMove, { passive: false });
          document.body.removeEventListener('touchend', this.handleDragEnd, { passive: false });
          document.body.removeEventListener('touchcancel', this.handleDragCancel);
        } else {
          document.body.removeEventListener('mousemove', this.handleDrag);
          document.body.removeEventListener('mouseup', this.handleDragEnd);
          document.body.removeEventListener('mouseleave', this.handleDragCancel);
        }
      }
    }, {
      key: 'render',
      value: function render() {
        var readOnly = this.props.readOnly;

        return _react2.default.createElement(Component, _extends({
          ref: this.setDomNode,
          onTouchStart: !readOnly && this.handleDragStart,
          onMouseDown: !readOnly && this.handleDragStart,
          onTouchMove: !readOnly && this.handleDrag
        }, (0, _omit3.default)(this.props, ['onDragStart', 'onDragEnd', 'onDrag'])));
      }
    }]);

    return DragAware;
  }(_react2.default.PureComponent), _class.propTypes = {
    onDragStart: _propTypes2.default.func.isRequired,
    onDrag: _propTypes2.default.func.isRequired,
    onDragEnd: _propTypes2.default.func.isRequired,
    readOnly: _propTypes2.default.bool
  }, _temp2;
}

function getPositionRelativeToRect(x, y, rect) {
  return {
    x: x - rect.left,
    y: y - rect.top
  };
}

function getPos(event) {
  if (supportsTouch) {
    return event.touches.length ? { x: event.touches[0].clientX, y: event.touches[0].clientY } : { x: 0, y: 0 };
  }

  return {
    x: event.clientX,
    y: event.clientY
  };
}

function diffPos(pos, otherPos) {
  return {
    x: pos.x - otherPos.x,
    y: pos.y - otherPos.y
  };
}